{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Zappy","text":"<p>a tribute to Zaphod Beeblebrox</p> Zappy Main project group Exceptions Zappy"},{"location":"#functions","title":"Functions","text":"Name Description init_client Initialize a new client handle_client Entry point were the clients inputs are handled write_command Sends the messages in client buffer free_client free the client is_client Check if the data is a client handle_new_ai Check if the AI is in a valid team and add it to the server handle_new_gui Authenticate a GUI client handle_gui_command Entry point for the processing of GUI's commands handle_ai_command Entry point for the processing of AI's commands parsing_check Final check for the parsing destroy_parsing Destroy the parsing structure. init_parsing Init an empty parsing structure parse Parse the arguments and return a parsing structure. is_parsing_ok Check if the argument passed in the program are ok is_digit Check is a char is a digit is_digits Check is a string is made of digit read_file Read a file get_file_content Get the content of a file sig_handler Signal handler free_tab Free a tab stowa str to word array tab_len Get the length of a tab command_forward AI is moving in the current direction command_right AI changing his direction to the right command_left AI changing his direction to the left command_look AI is looking in the current direction command_inventory AI is looking in his inventory command_broadcast AI is broadcasting a message command_co_nbr AI is checking how many clients can connect to his team command_fork AI is forking a new client and laying an egg command_eject AI is ejecting a client from his tile command_take AI is taking an item from the tile command_set AI is setting an item on the tile command_incantation AI is starting an incantation command_smg Sends a message to the GUI command_pnw Sends a new AI connection to the GUI command_seg Sends a endgame message to the GUI command_pdi Sends a death message to the GUI command_pex Sends an expulsion of an AI to the GUI command_pfk Sends a new egg was layed by a player to the GUI command_ebo Sends a player connection to a new egg to the GUI command_edi Sends a death of an egg to the GUI command_pdr Sends ressource dropping to the GUI command_pgt Sends ressource collecting to the GUI command_pie Sends an end of incantation to the GUI command_pbc Sends a new Broadcast to the GUI command_enw Sends a new player connection on egg to the GUI command_pic Sends a new incantation to the GUI command_msz Sends the map dimensions to the GUI command_bct Sends the tile content to the GUI command_mct Sends the content of all tiles to the GUI command_tna Sends the team names to the GUI command_ppo Sends the player infos to the GUI command_plv Sends the player level to the GUI command_pin Sends the player inventory to the GUI command_sgt Sends the server frequency  to the GUI command_sst modify the server frequency command_suc Sends unknown command to the GUI send_to_gui Periodically sends data to the GUI"},{"location":"#function-details","title":"Function Details","text":""},{"location":"#command_bct","title":"command_bct","text":"<p>void command_bct(char **cmd, client_t *client)</p> <p>Sends the tile content to the GUI</p> Parameter <code>cmd</code> Command sent by the client Parameter <code>client</code> GUI client"},{"location":"#command_broadcast","title":"command_broadcast","text":"<p>void command_broadcast(char **args, client_t *client)</p> <p>AI is broadcasting a message</p> Parameter <code>args</code> Arguments of the command Parameter <code>client</code> Client who is broadcasting"},{"location":"#command_co_nbr","title":"command_co_nbr","text":"<p>void command_co_nbr(char **args, client_t *client)</p> <p>AI is checking how many clients can connect to his team</p> Parameter <code>args</code> Arguments of the command Parameter <code>client</code> Client who is checking"},{"location":"#command_ebo","title":"command_ebo","text":"<p>void command_ebo(int id)</p> <p>Sends a player connection to a new egg to the GUI</p> Parameter <code>id</code> ID of the egg"},{"location":"#command_edi","title":"command_edi","text":"<p>void command_edi(int id)</p> <p>Sends a death of an egg to the GUI</p> Parameter <code>id</code> ID of the egg"},{"location":"#command_eject","title":"command_eject","text":"<p>void command_eject(char **args, client_t *client)</p> <p>AI is ejecting a client from his tile</p> Parameter <code>args</code> Arguments of the command Parameter <code>client</code> Client who is ejecting"},{"location":"#command_enw","title":"command_enw","text":"<p>void command_enw(int id, client_t *client)</p> <p>Sends a new player connection on egg to the GUI</p> Parameter <code>id</code> ID of the egg Parameter <code>client</code> Client that connected"},{"location":"#command_fork","title":"command_fork","text":"<p>void command_fork(char **args, client_t *client)</p> <p>AI is forking a new client and laying an egg</p> Parameter <code>args</code> Arguments of the command Parameter <code>client</code> Client who is forking"},{"location":"#command_forward","title":"command_forward","text":"<p>void command_forward(char **args, client_t *client)</p> <p>AI is moving in the current direction</p> Parameter <code>args</code> Arguments of the command Parameter <code>client</code> Client who is moving"},{"location":"#command_incantation","title":"command_incantation","text":"<p>void command_incantation(char **args, client_t *client)</p> <p>AI is starting an incantation</p> Parameter <code>args</code> Arguments of the command Parameter <code>client</code> Client who is starting the incantation"},{"location":"#command_inventory","title":"command_inventory","text":"<p>void command_inventory(char **args, client_t *client)</p> <p>AI is looking in his inventory</p> Parameter <code>args</code> Arguments of the command Parameter <code>client</code> Client who is looking"},{"location":"#command_left","title":"command_left","text":"<p>void command_left(char **args, client_t *client)</p> <p>AI changing his direction to the left</p> Parameter <code>args</code> Arguments of the command Parameter <code>client</code> Client who is moving"},{"location":"#command_look","title":"command_look","text":"<p>void command_look(char **args, client_t *client)</p> <p>AI is looking in the current direction</p> Parameter <code>args</code> Arguments of the command Parameter <code>client</code> Client who is looking"},{"location":"#command_mct","title":"command_mct","text":"<p>void command_mct(char **cmd, client_t *client)</p> <p>Sends the content of all tiles to the GUI</p> Parameter <code>cmd</code> Command sent by the client Parameter <code>client</code> GUI client"},{"location":"#command_msz","title":"command_msz","text":"<p>void command_msz(char **cmd, client_t *client)</p> <p>Sends the map dimensions to the GUI</p> Parameter <code>cmd</code> Command sent by the client Parameter <code>client</code> GUI client"},{"location":"#command_pbc","title":"command_pbc","text":"<p>void command_pbc(int id, const char *message)</p> <p>Sends a new Broadcast to the GUI</p> Parameter <code>id</code> ID of the player Parameter <code>message</code> Message of the broadcast"},{"location":"#command_pdi","title":"command_pdi","text":"<p>void command_pdi(int id)</p> <p>Sends a death message to the GUI</p> Parameter <code>id</code> ID of the dead player"},{"location":"#command_pdr","title":"command_pdr","text":"<p>void command_pdr(int id, int ressource)</p> <p>Sends ressource dropping to the GUI</p> Parameter <code>id</code> ID of the player Parameter <code>ressource</code> ID of the ressource"},{"location":"#command_pex","title":"command_pex","text":"<p>void command_pex(int id)</p> <p>Sends an expulsion of an AI to the GUI</p> Parameter <code>id</code> ID of the player"},{"location":"#command_pfk","title":"command_pfk","text":"<p>void command_pfk(int id)</p> <p>Sends a new egg was layed by a player to the GUI</p> Parameter <code>id</code> ID of the player"},{"location":"#command_pgt","title":"command_pgt","text":"<p>void command_pgt(int id, int ressource)</p> <p>Sends ressource collecting to the GUI</p> Parameter <code>id</code> ID of the player Parameter <code>ressource</code> ID of the ressource"},{"location":"#command_pic","title":"command_pic","text":"<p>void command_pic(client_t *client, int *ai, int size)</p> <p>Sends a new incantation to the GUI</p> Parameter <code>client</code> Client that started the incantation Parameter <code>ai</code> Array of the players in the incantation Parameter <code>size</code> Size of the array"},{"location":"#command_pie","title":"command_pie","text":"<p>void command_pie(int x, int y, bool success)</p> <p>Sends an end of incantation to the GUI</p> Parameter <code>x</code> X position of the incantation Parameter <code>y</code> Y position of the incantation Parameter <code>success</code> If the incantation was successful"},{"location":"#command_pin","title":"command_pin","text":"<p>void command_pin(char **cmd, client_t *client)</p> <p>Sends the player inventory to the GUI</p> Parameter <code>cmd</code> Command sent by the client Parameter <code>client</code> Client that connected"},{"location":"#command_plv","title":"command_plv","text":"<p>void command_plv(char **cmd, client_t *client)</p> <p>Sends the player level to the GUI</p> Parameter <code>cmd</code> Command sent by the client Parameter <code>client</code> Client that connected"},{"location":"#command_pnw","title":"command_pnw","text":"<p>void command_pnw(const char *data)</p> <p>Sends a new AI connection to the GUI</p> Parameter <code>data</code> Data of the new AI"},{"location":"#command_ppo","title":"command_ppo","text":"<p>void command_ppo(char **cmd, client_t *client)</p> <p>Sends the player infos to the GUI</p> Parameter <code>cmd</code> Command sent by the client Parameter <code>client</code> Client that connected"},{"location":"#command_right","title":"command_right","text":"<p>void command_right(char **args, client_t *client)</p> <p>AI changing his direction to the right</p> Parameter <code>args</code> Arguments of the command Parameter <code>client</code> Client who is moving"},{"location":"#command_seg","title":"command_seg","text":"<p>void command_seg(const char *data)</p> <p>Sends a endgame message to the GUI</p> Parameter <code>data</code> Name of the winning team"},{"location":"#command_set","title":"command_set","text":"<p>void command_set(char **args, client_t *client)</p> <p>AI is setting an item on the tile</p> Parameter <code>args</code> Arguments of the command Parameter <code>client</code> Client who is setting"},{"location":"#command_sgt","title":"command_sgt","text":"<p>void command_sgt(char **cmd, client_t *client)</p> <p>Sends the server frequency  to the GUI</p> Parameter <code>cmd</code> Command sent by the client Parameter <code>client</code> Client that connected"},{"location":"#command_smg","title":"command_smg","text":"<p>void command_smg(char **args)</p> <p>Sends a message to the GUI</p> Parameter <code>args</code> Arguments of the command"},{"location":"#command_sst","title":"command_sst","text":"<p>void command_sst(char **cmd, client_t *client)</p> <p>modify the server frequency</p> Parameter <code>cmd</code> Command sent by the client Parameter <code>client</code> Client that connected"},{"location":"#command_suc","title":"command_suc","text":"<p>void command_suc(client_t *)</p> <p>Sends unknown command to the GUI</p> Parameter <code>client</code> Client that connected"},{"location":"#command_take","title":"command_take","text":"<p>void command_take(char **args, client_t *client)</p> <p>AI is taking an item from the tile</p> Parameter <code>args</code> Arguments of the command Parameter <code>client</code> Client who is taking"},{"location":"#command_tna","title":"command_tna","text":"<p>void command_tna(char **cmd, client_t *client)</p> <p>Sends the team names to the GUI</p> Parameter <code>cmd</code> Command sent by the client Parameter <code>client</code> GUI client"},{"location":"#destroy_parsing","title":"destroy_parsing","text":"<p>void destroy_parsing(parsing_t *parsing)</p> <p>Destroy the parsing structure.</p> Parameter <code>parsing</code> A pointer to the parsing structure."},{"location":"#free_client","title":"free_client","text":"<p>void free_client(void *data)</p> <p>free the client</p> Parameter <code>data</code> Client to free"},{"location":"#free_tab","title":"free_tab","text":"<p>void free_tab(char **)</p> <p>Free a tab</p> Parameter <code>tab</code> the tab to free"},{"location":"#get_file_content","title":"get_file_content","text":"<p>char *get_file_content(char *filepath)</p> <p>Get the content of a file</p> Parameter <code>filepath</code> the path to the file Return the content of the file as a string"},{"location":"#handle_ai_command","title":"handle_ai_command","text":"<p>void handle_ai_command(client_t *client, const char *buffer)</p> <p>Entry point for the processing of AI's commands</p> Parameter <code>client</code> Client that sent the command Parameter <code>buffer</code> Command sent by the client"},{"location":"#handle_client","title":"handle_client","text":"<p>void handle_client(client_t *client)</p> <p>Entry point were the clients inputs are handled</p> Parameter <code>client</code> Client that sent the command"},{"location":"#handle_gui_command","title":"handle_gui_command","text":"<p>void handle_gui_command(client_t *client, const char *buffer)</p> <p>Entry point for the processing of GUI's commands</p> Parameter <code>client</code> Client that sent the command Parameter <code>buffer</code> Command sent by the client"},{"location":"#handle_new_ai","title":"handle_new_ai","text":"<p>void handle_new_ai(client_t *client, const char *data)</p> <p>Check if the AI is in a valid team and add it to the server</p> Parameter <code>client</code> Client trying to authenticate Parameter <code>data</code> Team name"},{"location":"#handle_new_gui","title":"handle_new_gui","text":"<p>void handle_new_gui(client_t *client)</p> <p>Authenticate a GUI client</p> Parameter <code>client</code> Client trying to authenticate"},{"location":"#init_client","title":"init_client","text":"<p>client_t *init_client(int fd)</p> <p>Initialize a new client</p> Parameter <code>fd</code> File descriptor of the client Return client_t* The new client"},{"location":"#init_parsing","title":"init_parsing","text":"<p>parsing_t *init_parsing(void)</p> <p>Init an empty parsing structure</p> Return the new structure"},{"location":"#is_client","title":"is_client","text":"<p>bool is_client(void *ref, void *data)</p> <p>Check if the data is a client</p> Parameter <code>ref</code> Reference client Parameter <code>data</code> Data to compare Return bool True if the data is a client, false otherwise"},{"location":"#is_digit","title":"is_digit","text":"<p>bool is_digit(char c)</p> <p>Check is a char is a digit</p> Parameter <code>c</code> the character to check Return True if the character is a digit, false otherwise"},{"location":"#is_digits","title":"is_digits","text":"<p>bool is_digits(char *str)</p> <p>Check is a string is made of digit</p> Parameter <code>str</code> the string to check Return True if the string is made of digits, false otherwise"},{"location":"#is_parsing_ok","title":"is_parsing_ok","text":"<p>void is_parsing_ok(parsing_t *p)</p> <p>Check if the argument passed in the program are ok</p> Parameter <code>p</code> The structure parsing_t Return exiting if not ok"},{"location":"#parse","title":"parse","text":"<p>parsing_t *parse(int argc, char **argv)</p> <p>Parse the arguments and return a parsing structure.</p> Parameter <code>argc</code> The number of arguments. Parameter <code>argv</code> The arguments. Return A pointer to the parsing structure."},{"location":"#parsing_check","title":"parsing_check","text":"<p>parsing_t *parsing_check(parsing_t *p)</p> <p>Final check for the parsing</p> Parameter <code>p</code> the parsing structure"},{"location":"#read_file","title":"read_file","text":"<p>void read_file(char *filepath)</p> <p>Read a file</p> Parameter <code>filepath</code> the path to the file"},{"location":"#send_to_gui","title":"send_to_gui","text":"<p>void send_to_gui(client_t *client)</p> <p>Periodically sends data to the GUI</p> Parameter <code>client</code> Client that connected"},{"location":"#sig_handler","title":"sig_handler","text":"<p>void sig_handler(int)</p> <p>Signal handler</p> Parameter <code>int</code> the signal status"},{"location":"#stowa","title":"stowa","text":"<p>*stowa(const char *, const char *)</p> <p>str to word array</p> Parameter <code>str</code> the string Parameter <code>sub</code> the substring Return the word array"},{"location":"#tab_len","title":"tab_len","text":"<p>int tab_len(char **)</p> <p>Get the length of a tab</p> Parameter <code>tab</code> the tab Return the length of the tab"},{"location":"#write_command","title":"write_command","text":"<p>void write_command(client_t *client)</p> <p>Sends the messages in client buffer</p> Parameter <code>client</code> Client whom messages are sent"},{"location":"Exceptions/","title":"Exceptions","text":""},{"location":"Exceptions/#types","title":"Types","text":"Name Description ConnexionServeurFail Exception thrown in case of a failed connection to the server Exception Class used to declare custom Exceptions  TranslationFileNotFound Exception thrown in case of an unknown font UnknownLocale Exception thrown in case of an unknown locale UnknownTranslationKey Exception thrown in case of an unknown translation key"},{"location":"Exceptions/ConnexionServeurFail/","title":"ConnexionServeurFail","text":"<p>class ConnexionServeurFail: public Exceptions::Exception</p> <p>Exception thrown in case of a failed connection to the server</p> <p>Note</p> <p>This class derives from the <code>Exception</code> class</p>"},{"location":"Exceptions/ConnexionServeurFail/#functions","title":"Functions","text":"Name Description ConnexionServeurFail Construct a new Connexion Serveur Fail object"},{"location":"Exceptions/ConnexionServeurFail/#function-details","title":"Function Details","text":""},{"location":"Exceptions/ConnexionServeurFail/#connexionserveurfail_1","title":"ConnexionServeurFail","text":"<p>ConnexionServeurFail(std::string what = \"Connection to server failed\", std::string serverAddress = \"\", int serverPort = 0)</p> <p>Construct a new Connexion Serveur Fail object</p> Parameter <code>what</code> The message of the exception. Default is \"Connection to server failed\" Parameter <code>serverAddress</code> The address of the server. Default is \"\" Parameter <code>serverPort</code> The port of the server. Default is 0 <p>Warning</p> <p>This exception will be thrown using the <code>Exception</code> class</p>"},{"location":"Exceptions/Exception/","title":"Exception","text":"<p>class Exception: public std::exception</p> <p>Class used to declare custom Exceptions</p> <p></p>"},{"location":"Exceptions/Exception/#operators","title":"Operators","text":"Name Description operator&lt;&lt; Get the message of the exception"},{"location":"Exceptions/Exception/#functions","title":"Functions","text":"Name Description Exception Construct a new Exception object getClassName Get the class name of the exception getInfos Get the position of the exception what Get the message of the exception"},{"location":"Exceptions/Exception/#operator-details","title":"Operator Details","text":""},{"location":"Exceptions/Exception/#operator","title":"operator&lt;&lt;","text":"<p>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Exceptions::Exception&amp; obj)</p> <p>Get the message of the exception</p> <p>Note</p> <p>This function is friend with the <code>std::ostream</code> class</p> Return <code>std::string</code> The message of the exception"},{"location":"Exceptions/Exception/#function-details","title":"Function Details","text":""},{"location":"Exceptions/Exception/#exception_1","title":"Exception","text":"<p>Exception(std::string what = \"An exception occured !\", std::pair&lt;std::string, std::pair&lt;std::string, std::size_t&gt;&gt; position = {\"\", {\"\", 0}})</p> <p>Construct a new Exception object</p> Parameter <code>what</code> The message of the exception. Default is \"An exception occured !\" Parameter <code>position</code> The position of the exception. Default is {\"\", {\"\", 0}}"},{"location":"Exceptions/Exception/#getclassname","title":"getClassName","text":"<p>std::string getClassName() const</p> <p>Get the class name of the exception</p> Return <code>std::string</code> The class name of the exception"},{"location":"Exceptions/Exception/#getinfos","title":"getInfos","text":"<p>std::pair&lt;std::string, std::pair&lt;std::string, std::size_t&gt;&gt; getInfos() const</p> <p>Get the position of the exception</p> Return <code>std::pair&lt;std::string, std::pair&lt;std::string, std::size_t&gt;&gt;</code> The position of the exception"},{"location":"Exceptions/Exception/#what","title":"what","text":"<p>const char* what() const noexcept override</p> <p>Get the message of the exception</p> Return <code>const char*</code> The message of the exception"},{"location":"Exceptions/TranslationFileNotFound/","title":"TranslationFileNotFound","text":"<p>class TranslationFileNotFound: public Exceptions::Exception</p> <p>Exception thrown in case of an unknown font</p> <p>Note</p> <p>This class derives from the <code>Exception</code> class</p>"},{"location":"Exceptions/TranslationFileNotFound/#functions","title":"Functions","text":"Name Description TranslationFileNotFound Construct a new Translation File Not Found object"},{"location":"Exceptions/TranslationFileNotFound/#function-details","title":"Function Details","text":""},{"location":"Exceptions/TranslationFileNotFound/#translationfilenotfound_1","title":"TranslationFileNotFound","text":"<p>TranslationFileNotFound(std::string what = \"Translation file not found.\", std::pair&lt;std::string, std::pair&lt;std::string, std::size_t&gt;&gt; position = {\"\", {\"\", 0}})</p> <p>Construct a new Translation File Not Found object</p> Parameter <code>what</code> The message of the exception. Default is \"Translation file not found.\" Parameter <code>position</code> The position of the exception. Default is {\"\", {\"\", 0}} <p>Warning</p> <p>This exception will be thrown using the <code>Exception</code> class</p>"},{"location":"Exceptions/UnknownLocale/","title":"UnknownLocale","text":"<p>class UnknownLocale: public Exceptions::Exception</p> <p>Exception thrown in case of an unknown locale</p> <p>Note</p> <p>This class derives from the <code>Exception</code> class</p>"},{"location":"Exceptions/UnknownLocale/#functions","title":"Functions","text":"Name Description UnknownLocale Construct a new Unknown Locale object"},{"location":"Exceptions/UnknownLocale/#function-details","title":"Function Details","text":""},{"location":"Exceptions/UnknownLocale/#unknownlocale_1","title":"UnknownLocale","text":"<p>UnknownLocale(std::string what = \"Locale non supported.\", std::pair&lt;std::string, std::pair&lt;std::string, std::size_t&gt;&gt; position = {\"\", {\"\", 0}})</p> <p>Construct a new Unknown Locale object</p> Parameter <code>what</code> The message of the exception. Default is \"Locale non supported.\" Parameter <code>position</code> The position of the exception. Default is {\"\", {\"\", 0}} <p>Warning</p> <p>This exception will be thrown using the <code>Exception</code> class</p>"},{"location":"Exceptions/UnknownTranslationKey/","title":"UnknownTranslationKey","text":"<p>class UnknownTranslationKey: public Exceptions::Exception</p> <p>Exception thrown in case of an unknown translation key</p> <p>Note</p> <p>This class derives from the <code>Exception</code> class</p>"},{"location":"Exceptions/UnknownTranslationKey/#functions","title":"Functions","text":"Name Description UnknownTranslationKey Construct a new Unknown Translation Key object"},{"location":"Exceptions/UnknownTranslationKey/#function-details","title":"Function Details","text":""},{"location":"Exceptions/UnknownTranslationKey/#unknowntranslationkey_1","title":"UnknownTranslationKey","text":"<p>UnknownTranslationKey(std::string what = \"Translation key not found.\", std::pair&lt;std::string, std::pair&lt;std::string, std::size_t&gt;&gt; position = {\"\", {\"\", 0}})</p> <p>Construct a new Unknown Translation Key object</p> Parameter <code>what</code> The message of the exception. Default is \"Translation key not found.\" Parameter <code>position</code> The position of the exception. Default is {\"\", {\"\", 0}} <p>Warning</p> <p>This exception will be thrown using the <code>Exception</code> class</p>"},{"location":"Zappy/","title":"Zappy","text":"<p>Main project group</p> Server Server side of the Zappy project"},{"location":"Zappy/GUI/","title":"GUI","text":"Component Raylib Ressources Scene Sfml"},{"location":"Zappy/GUI/#types","title":"Types","text":"Name Description AScene AScene class IScene IScene class Parsing Parsing class SceneManager SceneManager class"},{"location":"Zappy/GUI/#functions","title":"Functions","text":"Name Description isNumber Check if a string is made of only numbers"},{"location":"Zappy/GUI/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/#isnumber","title":"isNumber","text":"<p>bool isNumber(const std::string &amp;str)</p> <p>Check if a string is made of only numbers</p> Parameter <code>str</code> The string to check Return <code>true</code> if the string is made of only numbers, <code>false</code> otherwise"},{"location":"Zappy/GUI/AScene/","title":"AScene","text":"<p>class AScene : public IScene</p> <p>AScene class</p>"},{"location":"Zappy/GUI/AScene/#functions","title":"Functions","text":"Name Description start Start the scene destroy Destroy the scene update Update the scene update Update the scene draw3D Draw the 3D objects of the scene draw2D Draw the 2D objects of the scene nextScene Get the next scene isReady Check if the scene is ready resize Resize the scene"},{"location":"Zappy/GUI/AScene/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/AScene/#destroy","title":"destroy","text":"<p>void destroy() override</p> <p>Destroy the scene</p> <p>Warning</p> <p>After the destruction of the scene, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/AScene/#draw2d","title":"draw2D","text":"<p>void draw2D() override</p> <p>Draw the 2D objects of the scene</p>"},{"location":"Zappy/GUI/AScene/#draw3d","title":"draw3D","text":"<p>void draw3D() override</p> <p>Draw the 3D objects of the scene</p>"},{"location":"Zappy/GUI/AScene/#isready","title":"isReady","text":"<p>bool isReady() override</p> <p>Check if the scene is ready</p> Return <code>bool</code> If the scene is ready"},{"location":"Zappy/GUI/AScene/#nextscene","title":"nextScene","text":"<p>std::string nextScene() override</p> <p>Get the next scene</p> Return <code>std::string</code> The next scene"},{"location":"Zappy/GUI/AScene/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the scene</p>"},{"location":"Zappy/GUI/AScene/#start","title":"start","text":"<p>void start() override</p> <p>Start the scene</p>"},{"location":"Zappy/GUI/AScene/#update","title":"update","text":"<p>void update() override</p> <p>Update the scene</p> <p>void update(bool isGameReady) override</p> <p>Update the scene</p> Parameter <code>isGameReady</code> If the game is ready"},{"location":"Zappy/GUI/Component/","title":"Component","text":""},{"location":"Zappy/GUI/Component/#types","title":"Types","text":"Name Description AComponent Abstract class for all components Background2D Background2D component Button Button class ButtonClassic Button class Chatbox Chatbox component Circle Circle component Cube Cube component DelayServerSection Class representing the delay server section IComponent Interface for all components Image Image component Inspecter Class representing the Inspecter component InspecterInfo Class representing the info in the inspecter InspecterInfoTile Class representing the inspecter info tile InspecterSelecter Class representing the selecter in the inspecter InspecterSelecterGroup Class of the InspecterSelecterGroup InspecterSelecterGroupDraggable Class representing the draggable group of selecters in the inspecter Model3D Model3D component Rectangle A rectangle component Ressources Ressources component RoundedRectangle A rounded rectangle component Skybox Skybox component SliderVolume SliderVolume class Text Text component TextBox TextBox component TextGroup TextGroup class TextGroupDraggable TextGroupDraggable component TextMessage TextMessage class Tile Tile class TileMap TileMap class VolumeSection VolumeSection class"},{"location":"Zappy/GUI/Component/AComponent/","title":"AComponent","text":"<p>class AComponent: public IComponent</p> <p>Abstract class for all components</p>"},{"location":"Zappy/GUI/Component/AComponent/#functions","title":"Functions","text":"Name Description destroy Destroy the component draw Draw the component resize Resize the component setRef Set the reference of the component getPosX Get the position of the component getPosY Get the position of the component getPosZ Get the position of the component setPosX Set the position of the component setPosY Set the position of the component setPosZ Set the position of the component modPosX Modify the position of the component modPosY Modify the position of the component modPosZ Modify the position of the component getSizeX Get the size of the component getSizeY Get the size of the component getSizeZ Get the size of the component setSizeX Set the size of the component setSizeY Set the size of the component setSizeZ Set the size of the component modSizeX Modify the size of the component modSizeY Modify the size of the component modSizeZ Modify the size of the component getColor Get the color of the component setColor Set the color of the component"},{"location":"Zappy/GUI/Component/AComponent/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/AComponent/#destroy","title":"destroy","text":"<p>void destroy() override</p> <p>Destroy the component</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/AComponent/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the component</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/AComponent/#getcolor","title":"getColor","text":"<p>Color getColor() const override</p> <p>Get the color of the component</p> Return <code>Color</code> The color of the component"},{"location":"Zappy/GUI/Component/AComponent/#getposx","title":"getPosX","text":"<p>float getPosX() const override</p> <p>Get the position of the component</p> Return <code>float</code> The position on the X axis"},{"location":"Zappy/GUI/Component/AComponent/#getposy","title":"getPosY","text":"<p>float getPosY() const override</p> <p>Get the position of the component</p> Return <code>float</code> The position on the Y axis"},{"location":"Zappy/GUI/Component/AComponent/#getposz","title":"getPosZ","text":"<p>float getPosZ() const override</p> <p>Get the position of the component</p> Return <code>float</code> The position on the Z axis"},{"location":"Zappy/GUI/Component/AComponent/#getsizex","title":"getSizeX","text":"<p>float getSizeX() const override</p> <p>Get the size of the component</p> Return <code>float</code> The size on the X axis"},{"location":"Zappy/GUI/Component/AComponent/#getsizey","title":"getSizeY","text":"<p>float getSizeY() const override</p> <p>Get the size of the component</p> Return <code>float</code> The size on the Y axis"},{"location":"Zappy/GUI/Component/AComponent/#getsizez","title":"getSizeZ","text":"<p>float getSizeZ() const override</p> <p>Get the size of the component</p> Return <code>float</code> The size on the Z axis"},{"location":"Zappy/GUI/Component/AComponent/#modposx","title":"modPosX","text":"<p>void modPosX(float x) override</p> <p>Modify the position of the component</p> Parameter <code>x</code> The value to add to the current position on the X axis"},{"location":"Zappy/GUI/Component/AComponent/#modposy","title":"modPosY","text":"<p>void modPosY(float y) override</p> <p>Modify the position of the component</p> Parameter <code>y</code> The value to add to the current position on the Y axis"},{"location":"Zappy/GUI/Component/AComponent/#modposz","title":"modPosZ","text":"<p>void modPosZ(float z) override</p> <p>Modify the position of the component</p> Parameter <code>z</code> The value to add to the current position on the Z axis"},{"location":"Zappy/GUI/Component/AComponent/#modsizex","title":"modSizeX","text":"<p>void modSizeX(float x) override</p> <p>Modify the size of the component</p> Parameter <code>x</code> The value to add to the current size on the X axis"},{"location":"Zappy/GUI/Component/AComponent/#modsizey","title":"modSizeY","text":"<p>void modSizeY(float y) override</p> <p>Modify the size of the component</p> Parameter <code>y</code> The value to add to the current size on the Y axis"},{"location":"Zappy/GUI/Component/AComponent/#modsizez","title":"modSizeZ","text":"<p>void modSizeZ(float z) override</p> <p>Modify the size of the component</p> Parameter <code>z</code> The value to add to the current size on the Z axis"},{"location":"Zappy/GUI/Component/AComponent/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the component</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/AComponent/#setcolor","title":"setColor","text":"<p>void setColor(Color color) override</p> <p>Set the color of the component</p> Parameter <code>color</code> The new color of the component"},{"location":"Zappy/GUI/Component/AComponent/#setposx","title":"setPosX","text":"<p>void setPosX(float x) override</p> <p>Set the position of the component</p> Parameter <code>x</code> The new position on the X axis"},{"location":"Zappy/GUI/Component/AComponent/#setposy","title":"setPosY","text":"<p>void setPosY(float y) override</p> <p>Set the position of the component</p> Parameter <code>y</code> The new position on the Y axis"},{"location":"Zappy/GUI/Component/AComponent/#setposz","title":"setPosZ","text":"<p>void setPosZ(float z) override</p> <p>Set the position of the component</p> Parameter <code>z</code> The new position on the Z axis"},{"location":"Zappy/GUI/Component/AComponent/#setref","title":"setRef","text":"<p>void setRef() override</p> <p>Set the reference of the component</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/AComponent/#setsizex","title":"setSizeX","text":"<p>void setSizeX(float x) override</p> <p>Set the size of the component</p> Parameter <code>x</code> The new size on the X axis"},{"location":"Zappy/GUI/Component/AComponent/#setsizey","title":"setSizeY","text":"<p>void setSizeY(float y) override</p> <p>Set the size of the component</p> Parameter <code>y</code> The new size on the Y axis"},{"location":"Zappy/GUI/Component/AComponent/#setsizez","title":"setSizeZ","text":"<p>void setSizeZ(float z) override</p> <p>Set the size of the component</p> Parameter <code>z</code> The new size on the Z axis"},{"location":"Zappy/GUI/Component/Background2D/","title":"Background2D","text":"<p>class Background2D: public AComponent</p> <p>Background2D component</p> <p>@details This component is used to display a 2D background that covers the whole window</p>"},{"location":"Zappy/GUI/Component/Background2D/#functions","title":"Functions","text":"Name Description Background2D Construct a new Background2D object draw Draw the background resize Resize the background to fit the window"},{"location":"Zappy/GUI/Component/Background2D/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/Background2D/#background2d_1","title":"Background2D","text":"<p>Background2D(std::string texturePath)</p> <p>Construct a new Background2D object</p> Parameter <code>texturePath</code> Path to the texture to use as background. <p>Note</p> <p>The texture will be loaded using the TextureManager. So it must be in the 'assets/img/' folder.</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Background2D/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the background</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Background2D/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the background to fit the window</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Button/","title":"Button","text":"<p>class Button: public AComponent</p> <p>Button class</p>"},{"location":"Zappy/GUI/Component/Button/#functions","title":"Functions","text":"Name Description Button Button constructor draw Draw the button resize Resize the button setPosX Set the position of the button modPosX Modify the position of the button setPosY Set the position of the button modPosY Modify the position of the button setSizeX Set the size of the button setSizeY Set the size of the button setColor Set the color of the button isHover Check if the button is hovered isClickedWihoutSong Check if the button is clicked isClicked Check if the button is clicked isClicked Check if the button is clicked setText Set the text of the button getText Get the text of the button setState Set the state of the button NONE = -1 <p>Button state</p> <p>Note</p> <p><code>NONE</code> is used to initialize the state</p> <p>Note</p> <p><code>DEFAULT</code> is the default state</p> <p>Note</p> <p><code>HOVER</code> is the state when the mouse is over the button</p> <p>Note</p> <p><code>CLICKED</code> is the state when the button is clicked</p> <p>Note</p> <p><code>DISABLED</code> is the state when the button is disabled</p>"},{"location":"Zappy/GUI/Component/Button/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/Button/#button_1","title":"Button","text":"<p>Button(std::pair&lt;float, float&gt; pos, std::pair&lt;float, float&gt; size, std::string text, int textSize, Color color)</p> <p>Button constructor</p> Parameter <code>pos</code> Position of the button Parameter <code>size</code> Size of the button Parameter <code>text</code> Text of the button Parameter <code>textSize</code> Text size of the button Parameter <code>color</code> Color of the button <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Button/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the button</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Button/#gettext","title":"getText","text":"<p>std::string getText() const</p> <p>Get the text of the button</p> Return <code>std::string</code> The text of the button"},{"location":"Zappy/GUI/Component/Button/#isclicked","title":"isClicked","text":"<p>bool isClicked() const</p> <p>Check if the button is clicked</p> Parameter <code>textButton</code> The text of the button Return <code>bool</code> True if the button is clicked, <code>false</code> otherwise <p>bool isClicked(std::string textButton)</p> <p>Check if the button is clicked</p> Parameter <code>textButton</code> The text of the button Return <code>bool</code> True if the button is clicked, <code>false</code> otherwise"},{"location":"Zappy/GUI/Component/Button/#isclickedwihoutsong","title":"isClickedWihoutSong","text":"<p>bool isClickedWihoutSong() const</p> <p>Check if the button is clicked</p> Return <code>bool</code> True if the button is clicked, <code>false</code> otherwise"},{"location":"Zappy/GUI/Component/Button/#ishover","title":"isHover","text":"<p>bool isHover() const</p> <p>Check if the button is hovered</p> Return <code>bool</code> True if the button is hovered, <code>false</code> otherwise"},{"location":"Zappy/GUI/Component/Button/#modposx","title":"modPosX","text":"<p>void modPosX(float x) override</p> <p>Modify the position of the button</p> Parameter <code>x</code> The x position"},{"location":"Zappy/GUI/Component/Button/#modposy","title":"modPosY","text":"<p>void modPosY(float y) override</p> <p>Modify the position of the button</p> Parameter <code>Y</code> The y position"},{"location":"Zappy/GUI/Component/Button/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the button</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Button/#setcolor","title":"setColor","text":"<p>void setColor(Color color) override</p> <p>Set the color of the button</p> Parameter <code>color</code> The color of the button"},{"location":"Zappy/GUI/Component/Button/#setposx","title":"setPosX","text":"<p>void setPosX(float x) override</p> <p>Set the position of the button</p> Parameter <code>x</code> The x position"},{"location":"Zappy/GUI/Component/Button/#setposy","title":"setPosY","text":"<p>void setPosY(float Y) override</p> <p>Set the position of the button</p> Parameter <code>Y</code> The y position"},{"location":"Zappy/GUI/Component/Button/#setsizex","title":"setSizeX","text":"<p>void setSizeX(float x) override</p> <p>Set the size of the button</p> Parameter <code>x</code> The x size"},{"location":"Zappy/GUI/Component/Button/#setsizey","title":"setSizeY","text":"<p>void setSizeY(float y) override</p> <p>Set the size of the button</p> Parameter <code>y</code> The y size"},{"location":"Zappy/GUI/Component/Button/#setstate","title":"setState","text":"<p>void setState(State state)</p> <p>Set the state of the button</p> Parameter <code>state</code> The state of the button"},{"location":"Zappy/GUI/Component/Button/#settext","title":"setText","text":"<p>void setText(std::string text)</p> <p>Set the text of the button</p> Parameter <code>text</code> The text of the button"},{"location":"Zappy/GUI/Component/ButtonClassic/","title":"ButtonClassic","text":"<p>class ButtonClassic: public AComponent</p> <p>Button class</p>"},{"location":"Zappy/GUI/Component/ButtonClassic/#functions","title":"Functions","text":"Name Description ButtonClassic Button constructor draw Draw the button resize Resize the button setPosX Set the position of the button setPosY Set the position of the button modPosX Modify the position of the button modPosY Modify the position of the button setColor Set the color of the button isClicked Check if the button is clicked enableTextStroke Enable the text stroke disableTextStroke Disable the text stroke enableState Enable the button state disableState Disable the button state NONE = -1 <p>Button state</p> <p>Note</p> <p><code>NONE</code> is used to initialize the state</p> <p>Note</p> <p><code>DEFAULT</code> is the default state</p> <p>Note</p> <p><code>HOVER</code> is the state when the mouse is over the button</p> <p>Note</p> <p><code>CLICKED</code> is the state when the button is clicked</p>"},{"location":"Zappy/GUI/Component/ButtonClassic/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/ButtonClassic/#buttonclassic_1","title":"ButtonClassic","text":"<p>ButtonClassic(std::pair&lt;float, float&gt; pos, std::pair&lt;float, float&gt; size, std::string text, int textSize, Color color)</p> <p>Button constructor</p> Parameter <code>pos</code> Position of the button Parameter <code>size</code> Size of the button Parameter <code>text</code> Text of the button Parameter <code>textSize</code> Text size of the button Parameter <code>color</code> Color of the button <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/ButtonClassic/#disablestate","title":"disableState","text":"<p>void disableState()</p> <p>Disable the button state</p>"},{"location":"Zappy/GUI/Component/ButtonClassic/#disabletextstroke","title":"disableTextStroke","text":"<p>void disableTextStroke()</p> <p>Disable the text stroke</p>"},{"location":"Zappy/GUI/Component/ButtonClassic/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the button</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/ButtonClassic/#enablestate","title":"enableState","text":"<p>void enableState()</p> <p>Enable the button state</p>"},{"location":"Zappy/GUI/Component/ButtonClassic/#enabletextstroke","title":"enableTextStroke","text":"<p>void enableTextStroke()</p> <p>Enable the text stroke</p>"},{"location":"Zappy/GUI/Component/ButtonClassic/#isclicked","title":"isClicked","text":"<p>bool isClicked() const</p> <p>Check if the button is clicked</p> Return <code>true</code> if the button is clicked, <code>false</code> otherwise"},{"location":"Zappy/GUI/Component/ButtonClassic/#modposx","title":"modPosX","text":"<p>void modPosX(float x) override</p> <p>Modify the position of the button</p> Parameter <code>x</code> X position"},{"location":"Zappy/GUI/Component/ButtonClassic/#modposy","title":"modPosY","text":"<p>void modPosY(float y) override</p> <p>Modify the position of the button</p> Parameter <code>y</code> Y position"},{"location":"Zappy/GUI/Component/ButtonClassic/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the button</p>"},{"location":"Zappy/GUI/Component/ButtonClassic/#setcolor","title":"setColor","text":"<p>void setColor(Color color) override</p> <p>Set the color of the button</p> Parameter <code>color</code> Color of the button"},{"location":"Zappy/GUI/Component/ButtonClassic/#setposx","title":"setPosX","text":"<p>void setPosX(float x) override</p> <p>Set the position of the button</p> Parameter <code>x</code> X position"},{"location":"Zappy/GUI/Component/ButtonClassic/#setposy","title":"setPosY","text":"<p>void setPosY(float y) override</p> <p>Set the position of the button</p> Parameter <code>y</code> Y position"},{"location":"Zappy/GUI/Component/Chatbox/","title":"Chatbox","text":"<p>class Chatbox: public AComponent</p> <p>Chatbox component</p>"},{"location":"Zappy/GUI/Component/Chatbox/#functions","title":"Functions","text":"Name Description Chatbox Construct a new Chatbox object draw Draw the chatbox resize Resize the chatbox update Update the chatbox addMessage Add a message to the chatbox mouseIsOn Check if the mouse is on the chatbox"},{"location":"Zappy/GUI/Component/Chatbox/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/Chatbox/#chatbox_1","title":"Chatbox","text":"<p>Chatbox()</p> <p>Construct a new Chatbox object</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Chatbox/#addmessage","title":"addMessage","text":"<p>void addMessage(const std::string &amp;message, const std::string &amp;name, const std::string &amp;tabName)</p> <p>Add a message to the chatbox</p> Parameter <code>message</code> The message to add Parameter <code>name</code> The name of the chat Parameter <code>tabName</code> The name of the tab"},{"location":"Zappy/GUI/Component/Chatbox/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the chatbox</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Chatbox/#mouseison","title":"mouseIsOn","text":"<p>bool mouseIsOn() const</p> <p>Check if the mouse is on the chatbox</p> Return true if the mouse is on the chatbox Return false if the mouse is not on the chatbox"},{"location":"Zappy/GUI/Component/Chatbox/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the chatbox</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Chatbox/#update","title":"update","text":"<p>void update()</p> <p>Update the chatbox</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Circle/","title":"Circle","text":"<p>class Circle: public AComponent</p> <p>Circle component</p>"},{"location":"Zappy/GUI/Component/Circle/#functions","title":"Functions","text":"Name Description Circle Construct a new Circle object draw Draw the circle resize Resize the circle setRadius Set the radius of the circle getRadius Get the radius of the circle"},{"location":"Zappy/GUI/Component/Circle/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/Circle/#circle_1","title":"Circle","text":"<p>Circle(std::pair&lt;float, float&gt; pos, float radius, Color color)</p> <p>Construct a new Circle object</p> Parameter <code>pos</code> The position of the circle Parameter <code>radius</code> The radius of the circle Parameter <code>color</code> The color of the circle"},{"location":"Zappy/GUI/Component/Circle/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the circle</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Circle/#getradius","title":"getRadius","text":"<p>float getRadius() const</p> <p>Get the radius of the circle</p> Return <code>float</code> The radius of the circle"},{"location":"Zappy/GUI/Component/Circle/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the circle</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Circle/#setradius","title":"setRadius","text":"<p>void setRadius(float radius)</p> <p>Set the radius of the circle</p> Parameter <code>radius</code> The new radius of the circle"},{"location":"Zappy/GUI/Component/Cube/","title":"Cube","text":"<p>class Cube: public AComponent</p> <p>Cube component</p>"},{"location":"Zappy/GUI/Component/Cube/#functions","title":"Functions","text":"Name Description Cube Construct a new Cube object draw Draw the cube CUBE <p>Cube mode</p> <p>Note</p> <p><code>CUBE</code> Draw a cube</p> <p>Note</p> <p><code>WIRES</code> Draw the wires of a cube</p> <p>Note</p> <p><code>CUBE_WIRES</code> Draw a cube and its wires</p>"},{"location":"Zappy/GUI/Component/Cube/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/Cube/#cube_1","title":"Cube","text":"<p>Cube(Vector3 pos, Vector3 size, Color color, Mode mode)</p> <p>Construct a new Cube object</p> Parameter <code>pos</code> The position of the cube Parameter <code>size</code> The size of the cube Parameter <code>color</code> The color of the cube Parameter <code>mode</code> The mode of the cube"},{"location":"Zappy/GUI/Component/Cube/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the cube</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/DelayServerSection/","title":"DelayServerSection","text":"<p>class DelayServerSection : public AComponent</p> <p>Class representing the delay server section</p>"},{"location":"Zappy/GUI/Component/DelayServerSection/#functions","title":"Functions","text":"Name Description DelayServerSection Construct a new Delay Server Section object draw Draw the section resize Resize the section update Update the section"},{"location":"Zappy/GUI/Component/DelayServerSection/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/DelayServerSection/#delayserversection_1","title":"DelayServerSection","text":"<p>DelayServerSection(std::pair&lt;float, float&gt; pos, std::pair&lt;float, float&gt; size, void (Zappy::GUI::Sfml::SoundManager::*callback)(float))</p> <p>Construct a new Delay Server Section object</p> Parameter <code>pos</code> Position of the section Parameter <code>size</code> Size of the section Parameter <code>callback</code> Callback function"},{"location":"Zappy/GUI/Component/DelayServerSection/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the section</p>"},{"location":"Zappy/GUI/Component/DelayServerSection/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the section</p>"},{"location":"Zappy/GUI/Component/DelayServerSection/#update","title":"update","text":"<p>void update()</p> <p>Update the section</p>"},{"location":"Zappy/GUI/Component/IComponent/","title":"IComponent","text":"<p>class IComponent</p> <p>Interface for all components</p>"},{"location":"Zappy/GUI/Component/IComponent/#functions","title":"Functions","text":"Name Description destroy Destroy the component draw Draw the component resize Resize the component setRef Set the reference of the component getPosX Get the position of the component getPosY Get the position of the component getPosZ Get the position of the component setPosX Set the position of the component setPosY Set the position of the component setPosZ Set the position of the component modPosX Modify the position of the component modPosY Modify the position of the component modPosZ Modify the position of the component getSizeX Get the size of the component getSizeY Get the size of the component getSizeZ Get the size of the component setSizeX Set the size of the component setSizeY Set the size of the component setSizeZ Set the size of the component modSizeX Modify the size of the component modSizeY Modify the size of the component modSizeZ Modify the size of the component getColor Get the color of the component setColor Set the color of the component"},{"location":"Zappy/GUI/Component/IComponent/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/IComponent/#destroy","title":"destroy","text":"<p>virtual void destroy() = 0</p> <p>Destroy the component</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/IComponent/#draw","title":"draw","text":"<p>virtual void draw() = 0</p> <p>Draw the component</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/IComponent/#getcolor","title":"getColor","text":"<p>virtual Color getColor() const = 0</p> <p>Get the color of the component</p> Return <code>Color</code> The color of the component"},{"location":"Zappy/GUI/Component/IComponent/#getposx","title":"getPosX","text":"<p>virtual float getPosX() const = 0</p> <p>Get the position of the component</p> Return <code>float</code> The position on the X axis"},{"location":"Zappy/GUI/Component/IComponent/#getposy","title":"getPosY","text":"<p>virtual float getPosY() const = 0</p> <p>Get the position of the component</p> Return <code>float</code> The position on the Y axis"},{"location":"Zappy/GUI/Component/IComponent/#getposz","title":"getPosZ","text":"<p>virtual float getPosZ() const = 0</p> <p>Get the position of the component</p> Return <code>float</code> The position on the Z axis"},{"location":"Zappy/GUI/Component/IComponent/#getsizex","title":"getSizeX","text":"<p>virtual float getSizeX() const = 0</p> <p>Get the size of the component</p> Return <code>float</code> The size on the X axis"},{"location":"Zappy/GUI/Component/IComponent/#getsizey","title":"getSizeY","text":"<p>virtual float getSizeY() const = 0</p> <p>Get the size of the component</p> Return <code>float</code> The size on the Y axis"},{"location":"Zappy/GUI/Component/IComponent/#getsizez","title":"getSizeZ","text":"<p>virtual float getSizeZ() const = 0</p> <p>Get the size of the component</p> Return <code>float</code> The size on the Z axis"},{"location":"Zappy/GUI/Component/IComponent/#modposx","title":"modPosX","text":"<p>virtual void modPosX(float x) = 0</p> <p>Modify the position of the component</p> Parameter <code>x</code> The value to add to the current position on the X axis"},{"location":"Zappy/GUI/Component/IComponent/#modposy","title":"modPosY","text":"<p>virtual void modPosY(float y) = 0</p> <p>Modify the position of the component</p> Parameter <code>y</code> The value to add to the current position on the Y axis"},{"location":"Zappy/GUI/Component/IComponent/#modposz","title":"modPosZ","text":"<p>virtual void modPosZ(float z) = 0</p> <p>Modify the position of the component</p> Parameter <code>z</code> The value to add to the current position on the Z axis"},{"location":"Zappy/GUI/Component/IComponent/#modsizex","title":"modSizeX","text":"<p>virtual void modSizeX(float x) = 0</p> <p>Modify the size of the component</p> Parameter <code>x</code> The value to add to the current size on the X axis"},{"location":"Zappy/GUI/Component/IComponent/#modsizey","title":"modSizeY","text":"<p>virtual void modSizeY(float y) = 0</p> <p>Modify the size of the component</p> Parameter <code>y</code> The value to add to the current size on the Y axis"},{"location":"Zappy/GUI/Component/IComponent/#modsizez","title":"modSizeZ","text":"<p>virtual void modSizeZ(float z) = 0</p> <p>Modify the size of the component</p> Parameter <code>z</code> The value to add to the current size on the Z axis"},{"location":"Zappy/GUI/Component/IComponent/#resize","title":"resize","text":"<p>virtual void resize() = 0</p> <p>Resize the component</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/IComponent/#setcolor","title":"setColor","text":"<p>virtual void setColor(Color color) = 0</p> <p>Set the color of the component</p> Parameter <code>color</code> The new color of the component"},{"location":"Zappy/GUI/Component/IComponent/#setposx","title":"setPosX","text":"<p>virtual void setPosX(float x) = 0</p> <p>Set the position of the component</p> Parameter <code>x</code> The new position on the X axis"},{"location":"Zappy/GUI/Component/IComponent/#setposy","title":"setPosY","text":"<p>virtual void setPosY(float y) = 0</p> <p>Set the position of the component</p> Parameter <code>y</code> The new position on the Y axis"},{"location":"Zappy/GUI/Component/IComponent/#setposz","title":"setPosZ","text":"<p>virtual void setPosZ(float z) = 0</p> <p>Set the position of the component</p> Parameter <code>z</code> The new position on the Z axis"},{"location":"Zappy/GUI/Component/IComponent/#setref","title":"setRef","text":"<p>virtual void setRef() = 0</p> <p>Set the reference of the component</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/IComponent/#setsizex","title":"setSizeX","text":"<p>virtual void setSizeX(float x) = 0</p> <p>Set the size of the component</p> Parameter <code>x</code> The new size on the X axis"},{"location":"Zappy/GUI/Component/IComponent/#setsizey","title":"setSizeY","text":"<p>virtual void setSizeY(float y) = 0</p> <p>Set the size of the component</p> Parameter <code>y</code> The new size on the Y axis"},{"location":"Zappy/GUI/Component/IComponent/#setsizez","title":"setSizeZ","text":"<p>virtual void setSizeZ(float z) = 0</p> <p>Set the size of the component</p> Parameter <code>z</code> The new size on the Z axis"},{"location":"Zappy/GUI/Component/Image/","title":"Image","text":"<p>class Image: public AComponent</p> <p>Image component</p>"},{"location":"Zappy/GUI/Component/Image/#functions","title":"Functions","text":"Name Description Image Construct a new Image object draw Draw the image resize Resize the image"},{"location":"Zappy/GUI/Component/Image/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/Image/#image_1","title":"Image","text":"<p>Image(std::string path, std::pair&lt;float, float&gt; pos, float scale)</p> <p>Construct a new Image object</p> Parameter <code>path</code> Path to the image Parameter <code>pos</code> Position of the image Parameter <code>scale</code> Scale of the image <p>Warning</p> <p>The image will be loaded using the TextureManager. So it must be in the 'assets/images/' folder.</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Image/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the image</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Image/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the image</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Inspecter/","title":"Inspecter","text":"<p>class Inspecter: public AComponent</p> <p>Class representing the Inspecter component</p>"},{"location":"Zappy/GUI/Component/Inspecter/#functions","title":"Functions","text":"Name Description Inspecter Construct a new Inspecter object draw Draw the Inspecter component resize Resize the Inspecter component update Update the Inspecter component mouseIsOn Check if the mouse is on the Inspecter component open Open the Inspecter component close Close the Inspecter component"},{"location":"Zappy/GUI/Component/Inspecter/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/Inspecter/#inspecter_1","title":"Inspecter","text":"<p>Inspecter()</p> <p>Construct a new Inspecter object</p>"},{"location":"Zappy/GUI/Component/Inspecter/#close","title":"close","text":"<p>void close()</p> <p>Close the Inspecter component</p>"},{"location":"Zappy/GUI/Component/Inspecter/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the Inspecter component</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Inspecter/#mouseison","title":"mouseIsOn","text":"<p>bool mouseIsOn() const</p> <p>Check if the mouse is on the Inspecter component</p> Return <code>true</code> if the mouse is on the Inspecter component, <code>false</code> otherwise"},{"location":"Zappy/GUI/Component/Inspecter/#open","title":"open","text":"<p>void open()</p> <p>Open the Inspecter component</p>"},{"location":"Zappy/GUI/Component/Inspecter/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the Inspecter component</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Inspecter/#update","title":"update","text":"<p>void update(std::pair&lt;int, int&gt; selectedTile)</p> <p>Update the Inspecter component</p> Parameter <code>selectedTile</code> The coordinates of the selected tile"},{"location":"Zappy/GUI/Component/InspecterInfo/","title":"InspecterInfo","text":"<p>class InspecterInfo: public AComponent</p> <p>Class representing the info in the inspecter</p>"},{"location":"Zappy/GUI/Component/InspecterInfo/#functions","title":"Functions","text":"Name Description InspecterInfo Construct a new Inspecter Info object draw Draw the info resize Resize the info modPosX Set the position on X axis of the info setInfoPlayer Set the informaton of the player setInfoEgg Set the informaton of the egg"},{"location":"Zappy/GUI/Component/InspecterInfo/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/InspecterInfo/#inspecterinfo_1","title":"InspecterInfo","text":"<p>InspecterInfo(std::pair&lt;int, int&gt; pos, std::pair&lt;int, int&gt; size)</p> <p>Construct a new Inspecter Info object</p> Parameter <code>pos</code> The position of the info Parameter <code>size</code> The size of the info"},{"location":"Zappy/GUI/Component/InspecterInfo/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the info</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/InspecterInfo/#modposx","title":"modPosX","text":"<p>void modPosX(float x) override</p> <p>Set the position on X axis of the info</p> Parameter <code>x</code> The new x position of the info"},{"location":"Zappy/GUI/Component/InspecterInfo/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the info</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/InspecterInfo/#setinfoegg","title":"setInfoEgg","text":"<p>void setInfoEgg(std::shared_ptr&lt;Zappy::GUI::Ressources::Eggs&gt; egg)</p> <p>Set the informaton of the egg</p> Parameter <code>egg</code> The egg to display"},{"location":"Zappy/GUI/Component/InspecterInfo/#setinfoplayer","title":"setInfoPlayer","text":"<p>void setInfoPlayer(std::shared_ptr&lt;Zappy::GUI::Ressources::Players&gt; player)</p> <p>Set the informaton of the player</p> Parameter <code>player</code> The player to display"},{"location":"Zappy/GUI/Component/InspecterInfoTile/","title":"InspecterInfoTile","text":"<p>class InspecterInfoTile: public AComponent</p> <p>Class representing the inspecter info tile</p>"},{"location":"Zappy/GUI/Component/InspecterInfoTile/#functions","title":"Functions","text":"Name Description InspecterInfoTile Construct a new Inspecter Info Tile object draw Draw the tile resize Resize the tile modPosX Modify the position of the tile setInfo Set the position of the tile"},{"location":"Zappy/GUI/Component/InspecterInfoTile/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/InspecterInfoTile/#inspecterinfotile_1","title":"InspecterInfoTile","text":"<p>InspecterInfoTile(std::pair&lt;int, int&gt; pos, std::pair&lt;int, int&gt; size)</p> <p>Construct a new Inspecter Info Tile object</p> Parameter <code>pos</code> The position of the tile Parameter <code>size</code> The size of the tile"},{"location":"Zappy/GUI/Component/InspecterInfoTile/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the tile</p>"},{"location":"Zappy/GUI/Component/InspecterInfoTile/#modposx","title":"modPosX","text":"<p>void modPosX(float x) override</p> <p>Modify the position of the tile</p>"},{"location":"Zappy/GUI/Component/InspecterInfoTile/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the tile</p>"},{"location":"Zappy/GUI/Component/InspecterInfoTile/#setinfo","title":"setInfo","text":"<p>void setInfo(std::shared_ptr&lt;Zappy::GUI::Ressources::TileRessources&gt; tile)</p> <p>Set the position of the tile</p>"},{"location":"Zappy/GUI/Component/InspecterSelecter/","title":"InspecterSelecter","text":"<p>class InspecterSelecter: public AComponent</p> <p>Class representing the selecter in the inspecter</p>"},{"location":"Zappy/GUI/Component/InspecterSelecter/#functions","title":"Functions","text":"Name Description InspecterSelecter Construct a new Inspecter Selecter object InspecterSelecter Construct a new Inspecter Selecter object draw Draw the selecter resize Resize the selecter modPosX Modify the position of the selecter modPosY Modify the position of the selecter setPosX Set the position of the selecter setPosY Set the position of the selecter update Update the selecter setSelected Set the selected state of the selecter isClicked Check if the selecter is clicked isPlayer Check if the selecter is selected getPlayer Get the Player object getEgg Get the Egg object"},{"location":"Zappy/GUI/Component/InspecterSelecter/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/InspecterSelecter/#inspecterselecter_1","title":"InspecterSelecter","text":"<p>InspecterSelecter(std::pair&lt;int, int&gt; pos, int width, std::shared_ptr&lt;Zappy::GUI::Ressources::Players&gt; player)</p> <p>Construct a new Inspecter Selecter object</p> Parameter <code>pos</code> The position of the selecter Parameter <code>width</code> The width of the selecter Parameter <code>player</code> The player to display <p>InspecterSelecter(std::pair&lt;int, int&gt; pos, int width, std::shared_ptr&lt;Zappy::GUI::Ressources::Eggs&gt; egg)</p> <p>Construct a new Inspecter Selecter object</p> Parameter <code>pos</code> The position of the selecter Parameter <code>width</code> The width of the selecter Parameter <code>egg</code> The egg to display"},{"location":"Zappy/GUI/Component/InspecterSelecter/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the selecter</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/InspecterSelecter/#getegg","title":"getEgg","text":"<p>std::shared_ptr&lt;Zappy::GUI::Ressources::Eggs&gt; getEgg() const</p> <p>Get the Egg object</p> Return <code>std::shared_ptr&lt;Zappy::GUI::Ressources::Eggs&gt;</code> The egg"},{"location":"Zappy/GUI/Component/InspecterSelecter/#getplayer","title":"getPlayer","text":"<p>std::shared_ptr&lt;Zappy::GUI::Ressources::Players&gt; getPlayer() const</p> <p>Get the Player object</p> Return <code>std::shared_ptr&lt;Zappy::GUI::Ressources::Players&gt;</code> The player"},{"location":"Zappy/GUI/Component/InspecterSelecter/#isclicked","title":"isClicked","text":"<p>bool isClicked() const</p> <p>Check if the selecter is clicked</p> Return true if the selecter is clicked Return false if the selecter is not clicked"},{"location":"Zappy/GUI/Component/InspecterSelecter/#isplayer","title":"isPlayer","text":"<p>bool isPlayer() const</p> <p>Check if the selecter is selected</p> Return true if the selecter is selected Return false if the selecter is not selected"},{"location":"Zappy/GUI/Component/InspecterSelecter/#modposx","title":"modPosX","text":"<p>void modPosX(float x) override</p> <p>Modify the position of the selecter</p> Parameter <code>x</code> The x position to add"},{"location":"Zappy/GUI/Component/InspecterSelecter/#modposy","title":"modPosY","text":"<p>void modPosY(float y) override</p> <p>Modify the position of the selecter</p> Parameter <code>y</code> The y position to add"},{"location":"Zappy/GUI/Component/InspecterSelecter/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the selecter</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/InspecterSelecter/#setposx","title":"setPosX","text":"<p>void setPosX(float x) override</p> <p>Set the position of the selecter</p> Parameter <code>x</code> The new x position"},{"location":"Zappy/GUI/Component/InspecterSelecter/#setposy","title":"setPosY","text":"<p>void setPosY(float y) override</p> <p>Set the position of the selecter</p> Parameter <code>y</code> The new y position"},{"location":"Zappy/GUI/Component/InspecterSelecter/#setselected","title":"setSelected","text":"<p>void setSelected(bool selected)</p> <p>Set the selected state of the selecter</p> Parameter <code>selected</code> The new selected state"},{"location":"Zappy/GUI/Component/InspecterSelecter/#update","title":"update","text":"<p>void update()</p> <p>Update the selecter</p>"},{"location":"Zappy/GUI/Component/InspecterSelecterGroup/","title":"InspecterSelecterGroup","text":"<p>class InspecterSelecterGroup: public AComponent</p> <p>Class of the InspecterSelecterGroup</p>"},{"location":"Zappy/GUI/Component/InspecterSelecterGroup/#functions","title":"Functions","text":"Name Description InspecterSelecterGroup Construct a new InspecterSelecterGroup object draw draw the InspecterSelecterGroup resize Resize the InspecterSelecterGroup modPosX Modify the position of the InspecterSelecterGroup setPosX Set the position of the InspecterSelecterGroup setPosY Set the position of the InspecterSelecterGroup update Update the InspecterSelecterGroup reset Reset the InspecterSelecterGroup addPlayer Add a player to the InspecterSelecterGroup addEgg Add an egg to the InspecterSelecterGroup"},{"location":"Zappy/GUI/Component/InspecterSelecterGroup/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/InspecterSelecterGroup/#inspecterselectergroup_1","title":"InspecterSelecterGroup","text":"<p>InspecterSelecterGroup(std::pair&lt;int, int&gt; pos, int width)</p> <p>Construct a new InspecterSelecterGroup object</p> Parameter <code>pos</code> Parameter <code>width</code>"},{"location":"Zappy/GUI/Component/InspecterSelecterGroup/#addegg","title":"addEgg","text":"<p>void addEgg(std::shared_ptr&lt;Zappy::GUI::Ressources::Eggs&gt; egg)</p> <p>Add an egg to the InspecterSelecterGroup</p> Parameter <code>egg</code> The egg to add"},{"location":"Zappy/GUI/Component/InspecterSelecterGroup/#addplayer","title":"addPlayer","text":"<p>void addPlayer(std::shared_ptr&lt;Zappy::GUI::Ressources::Players&gt; player)</p> <p>Add a player to the InspecterSelecterGroup</p> Parameter <code>player</code> The player to add"},{"location":"Zappy/GUI/Component/InspecterSelecterGroup/#draw","title":"draw","text":"<p>void draw() override</p> <p>draw the InspecterSelecterGroup</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/InspecterSelecterGroup/#modposx","title":"modPosX","text":"<p>void modPosX(float x) override</p> <p>Modify the position of the InspecterSelecterGroup</p> Parameter <code>x</code> The x position to add"},{"location":"Zappy/GUI/Component/InspecterSelecterGroup/#reset","title":"reset","text":"<p>void reset(std::shared_ptr&lt;Zappy::GUI::Component::InspecterInfo&gt; info)</p> <p>Reset the InspecterSelecterGroup</p> Parameter <code>info</code> The info to reset with"},{"location":"Zappy/GUI/Component/InspecterSelecterGroup/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the InspecterSelecterGroup</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/InspecterSelecterGroup/#setposx","title":"setPosX","text":"<p>void setPosX(float x) override</p> <p>Set the position of the InspecterSelecterGroup</p> Parameter <code>x</code> The new x position"},{"location":"Zappy/GUI/Component/InspecterSelecterGroup/#setposy","title":"setPosY","text":"<p>void setPosY(float y) override</p> <p>Set the position of the InspecterSelecterGroup</p> Parameter <code>y</code> The new y position"},{"location":"Zappy/GUI/Component/InspecterSelecterGroup/#update","title":"update","text":"<p>void update(std::shared_ptr&lt;Zappy::GUI::Component::InspecterInfo&gt; info)</p> <p>Update the InspecterSelecterGroup</p> Parameter <code>info</code> The info to update"},{"location":"Zappy/GUI/Component/InspecterSelecterGroupDraggable/","title":"InspecterSelecterGroupDraggable","text":"<p>class InspecterSelecterGroupDraggable: public AComponent</p> <p>Class representing the draggable group of selecters in the inspecter</p>"},{"location":"Zappy/GUI/Component/InspecterSelecterGroupDraggable/#functions","title":"Functions","text":"Name Description InspecterSelecterGroupDraggable Construct a new Inspecter Selecter Group Draggable object draw Draw the group resize Resize the group setPosX Set the position of the group modPosX Modify the position of the group update Update the group reset Reset the group addSelecter Add a selecter to the group addSelecter Add a selecter to the group"},{"location":"Zappy/GUI/Component/InspecterSelecterGroupDraggable/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/InspecterSelecterGroupDraggable/#inspecterselectergroupdraggable_1","title":"InspecterSelecterGroupDraggable","text":"<p>InspecterSelecterGroupDraggable(std::pair&lt;int, int&gt; pos, std::pair&lt;int, int&gt; size)</p> <p>Construct a new Inspecter Selecter Group Draggable object</p> Parameter <code>pos</code> The position of the group Parameter <code>size</code> The size of the group"},{"location":"Zappy/GUI/Component/InspecterSelecterGroupDraggable/#addselecter","title":"addSelecter","text":"<p>void addSelecter(std::shared_ptr&lt;Zappy::GUI::Ressources::Players&gt; player)</p> <p>Add a selecter to the group</p> Parameter <code>player</code> The player to add <p>void addSelecter(std::shared_ptr&lt;Zappy::GUI::Ressources::Eggs&gt; egg)</p> <p>Add a selecter to the group</p> Parameter <code>egg</code> The egg to add"},{"location":"Zappy/GUI/Component/InspecterSelecterGroupDraggable/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the group</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/InspecterSelecterGroupDraggable/#modposx","title":"modPosX","text":"<p>void modPosX(float x) override</p> <p>Modify the position of the group</p> Parameter <code>x</code> The x position to add"},{"location":"Zappy/GUI/Component/InspecterSelecterGroupDraggable/#reset","title":"reset","text":"<p>void reset(std::shared_ptr&lt;Zappy::GUI::Component::InspecterInfo&gt; info)</p> <p>Reset the group</p> Parameter <code>info</code> The info to reset the group with"},{"location":"Zappy/GUI/Component/InspecterSelecterGroupDraggable/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the group</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/InspecterSelecterGroupDraggable/#setposx","title":"setPosX","text":"<p>void setPosX(float x) override</p> <p>Set the position of the group</p> Parameter <code>x</code> The new x position"},{"location":"Zappy/GUI/Component/InspecterSelecterGroupDraggable/#update","title":"update","text":"<p>void update(std::shared_ptr&lt;Zappy::GUI::Component::InspecterInfo&gt; info)</p> <p>Update the group</p> Parameter <code>info</code> The info to update the group with"},{"location":"Zappy/GUI/Component/Model3D/","title":"Model3D","text":"<p>class Model3D: public AComponent</p> <p>Model3D component</p>"},{"location":"Zappy/GUI/Component/Model3D/#functions","title":"Functions","text":"Name Description Model3D Construct a new Model3D object draw Draw the model resize Resize the model setOnPosY Set the position of the model on th y value on the Y axis"},{"location":"Zappy/GUI/Component/Model3D/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/Model3D/#model3d_1","title":"Model3D","text":"<p>Model3D(std::string path, Vector3 pos, float scale, Vector3 rotationAxis = {0, 1, 0}, float angle = 0)</p> <p>Construct a new Model3D object</p> Parameter <code>path</code> Path to the model Parameter <code>pos</code> Position of the model Parameter <code>scale</code> Scale of the model Parameter <code>rotationAxis</code> Rotation axis of the model. Default is {0, 1, 0} Parameter <code>angle</code> Angle of the model. Default is 0 <p>Warning</p> <p>The font will be loaded using the ModelManager. So it must be in the 'assets/models/' folder and it must be a '.gltf' file</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Model3D/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the model</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Model3D/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the model</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Model3D/#setonposy","title":"setOnPosY","text":"<p>void setOnPosY(float y)</p> <p>Set the position of the model on th y value on the Y axis</p> Parameter <code>y</code> The new position on the Y axis <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Rectangle/","title":"Rectangle","text":"<p>class Rectangle : public AComponent</p> <p>A rectangle component</p>"},{"location":"Zappy/GUI/Component/Rectangle/#functions","title":"Functions","text":"Name Description Rectangle Construct a new Rectangle object draw Draw the rectangle resize Resize the rectangle setStroke Set the Stroke object"},{"location":"Zappy/GUI/Component/Rectangle/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/Rectangle/#rectangle_1","title":"Rectangle","text":"<p>Rectangle(std::pair&lt;int, int&gt; pos, std::pair&lt;int, int&gt; size, Color color)</p> <p>Construct a new Rectangle object</p> Parameter <code>pos</code> The position of the rectangle Parameter <code>size</code> The size of the rectangle Parameter <code>color</code> The color of the rectangle"},{"location":"Zappy/GUI/Component/Rectangle/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the rectangle</p> <p>Warning</p> <p>This function have to be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Rectangle/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the rectangle</p>"},{"location":"Zappy/GUI/Component/Rectangle/#setstroke","title":"setStroke","text":"<p>void setStroke(float strokeSize, Color strokeColor)</p> <p>Set the Stroke object</p> Parameter <code>strokeSize</code> The size of the stroke Parameter <code>strokeColor</code> The color of the stroke"},{"location":"Zappy/GUI/Component/Ressources/","title":"Ressources","text":"<p>class Ressources: public AComponent</p> <p>Ressources component</p>"},{"location":"Zappy/GUI/Component/Ressources/#functions","title":"Functions","text":"Name Description Ressources Construct a new Ressources object setPosX Set the position on the X axis setPosY Set the position on the Y axis setPosZ Set the position on the Z axis drawFood Draw the ressources drawEgg Draw the egg drawLinemate Draw the linemate drawDeraumere Draw the deraumere drawSibur Draw the sibur drawMendiane Draw the mendiane drawPhiras Draw the phiras drawThystame Draw the thystame drawZappy Draw the zappy resize Resize the ressources"},{"location":"Zappy/GUI/Component/Ressources/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/Ressources/#ressources_1","title":"Ressources","text":"<p>Ressources(Vector3 size)</p> <p>Construct a new Ressources object</p> Parameter <code>size</code> The size of the ressources <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Ressources/#drawderaumere","title":"drawDeraumere","text":"<p>void drawDeraumere()</p> <p>Draw the deraumere</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Ressources/#drawegg","title":"drawEgg","text":"<p>void drawEgg()</p> <p>Draw the egg</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Ressources/#drawfood","title":"drawFood","text":"<p>void drawFood()</p> <p>Draw the ressources</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Ressources/#drawlinemate","title":"drawLinemate","text":"<p>void drawLinemate()</p> <p>Draw the linemate</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Ressources/#drawmendiane","title":"drawMendiane","text":"<p>void drawMendiane()</p> <p>Draw the mendiane</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Ressources/#drawphiras","title":"drawPhiras","text":"<p>void drawPhiras()</p> <p>Draw the phiras</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Ressources/#drawsibur","title":"drawSibur","text":"<p>void drawSibur()</p> <p>Draw the sibur</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Ressources/#drawthystame","title":"drawThystame","text":"<p>void drawThystame()</p> <p>Draw the thystame</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Ressources/#drawzappy","title":"drawZappy","text":"<p>void drawZappy()</p> <p>Draw the zappy</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Ressources/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the ressources</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Ressources/#setposx","title":"setPosX","text":"<p>void setPosX(float x) override</p> <p>Set the position on the X axis</p> Parameter <code>x</code> The new position on the X axis"},{"location":"Zappy/GUI/Component/Ressources/#setposy","title":"setPosY","text":"<p>void setPosY(float y) override</p> <p>Set the position on the Y axis</p> Parameter <code>y</code> The new position on the Y axis"},{"location":"Zappy/GUI/Component/Ressources/#setposz","title":"setPosZ","text":"<p>void setPosZ(float z) override</p> <p>Set the position on the Z axis</p> Parameter <code>z</code> The new position on the Z axis"},{"location":"Zappy/GUI/Component/RoundedRectangle/","title":"RoundedRectangle","text":"<p>class RoundedRectangle: public AComponent</p> <p>A rounded rectangle component</p>"},{"location":"Zappy/GUI/Component/RoundedRectangle/#functions","title":"Functions","text":"Name Description RoundedRectangle Construct a new RoundedRectangle object draw Draw the rectangle resize Resize the rectangle setRadius Set the radius of the rectangle getRadius Get the radius of the rectangle"},{"location":"Zappy/GUI/Component/RoundedRectangle/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/RoundedRectangle/#roundedrectangle_1","title":"RoundedRectangle","text":"<p>RoundedRectangle(std::pair&lt;float, float&gt; pos, std::pair&lt;float, float&gt; size, float radius, Color color)</p> <p>Construct a new RoundedRectangle object</p> Parameter <code>pos</code> The position of the rectangle Parameter <code>size</code> The size of the rectangle Parameter <code>radius</code> The radius of the rectangle Parameter <code>color</code> The color of the rectangle"},{"location":"Zappy/GUI/Component/RoundedRectangle/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the rectangle</p> <p>Warning</p> <p>This function have to be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/RoundedRectangle/#getradius","title":"getRadius","text":"<p>float getRadius() const</p> <p>Get the radius of the rectangle</p> Return <code>float</code> The radius of the rectangle"},{"location":"Zappy/GUI/Component/RoundedRectangle/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the rectangle</p>"},{"location":"Zappy/GUI/Component/RoundedRectangle/#setradius","title":"setRadius","text":"<p>void setRadius(float radius)</p> <p>Set the radius of the rectangle</p> Parameter <code>radius</code> The radius of the rectangle"},{"location":"Zappy/GUI/Component/Skybox/","title":"Skybox","text":"<p>class Skybox : public AComponent</p> <p>Skybox component</p>"},{"location":"Zappy/GUI/Component/Skybox/#functions","title":"Functions","text":"Name Description Skybox Construct a new Skybox object destroy Destroy the Skybox object draw Draw the skybox resize Resize the skybox update Update the skybox"},{"location":"Zappy/GUI/Component/Skybox/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/Skybox/#skybox_1","title":"Skybox","text":"<p>Skybox(bool visible = true, float size = 1000)</p> <p>Construct a new Skybox object</p> Parameter <code>visible</code> Visibility of the skybox. Default is true Parameter <code>size</code> Size of the skybox. Default is 1000 <p>Warning</p> <p>The skybox will be loaded using the TextureManager. So it must be in the 'assets/skybox/' folder.</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Skybox/#destroy","title":"destroy","text":"<p>void destroy() override</p> <p>Destroy the Skybox object</p> <p>Warning</p> <p>This function should be called in the raylib context</p> <p>Warning</p> <p>After calling this function, the object should not be used anymore</p>"},{"location":"Zappy/GUI/Component/Skybox/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the skybox</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Skybox/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the skybox</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Skybox/#update","title":"update","text":"<p>void update(std::shared_ptr&lt;Zappy::GUI::Raylib::Render&gt; render)</p> <p>Update the skybox</p> Parameter <code>render</code> Render object"},{"location":"Zappy/GUI/Component/SliderVolume/","title":"SliderVolume","text":"<p>class SliderVolume: public AComponent</p> <p>SliderVolume class</p>"},{"location":"Zappy/GUI/Component/SliderVolume/#functions","title":"Functions","text":"Name Description SliderVolume Construct a new SliderVolume object draw Draw the slider resize Resize the slider update Update the slider setActive Set the active state of the slider setValue Set the value of the slider getActive Get the active state of the slider getValue Get the value of the slider"},{"location":"Zappy/GUI/Component/SliderVolume/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/SliderVolume/#slidervolume_1","title":"SliderVolume","text":"<p>SliderVolume(std::pair&lt;float, float&gt; pos, float width, float height)</p> <p>Construct a new SliderVolume object</p> Parameter <code>pos</code> Position of the slider Parameter <code>width</code> Width of the slider Parameter <code>height</code> Height of the slider"},{"location":"Zappy/GUI/Component/SliderVolume/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the slider</p> <p>Warning</p> <p>This function have to be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/SliderVolume/#getactive","title":"getActive","text":"<p>bool getActive() const</p> <p>Get the active state of the slider</p> Return <code>true</code> if the slider is active, <code>false</code> otherwise"},{"location":"Zappy/GUI/Component/SliderVolume/#getvalue","title":"getValue","text":"<p>float getValue() const</p> <p>Get the value of the slider</p> Return <code>float</code> The value of the slider"},{"location":"Zappy/GUI/Component/SliderVolume/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the slider</p>"},{"location":"Zappy/GUI/Component/SliderVolume/#setactive","title":"setActive","text":"<p>void setActive(bool active)</p> <p>Set the active state of the slider</p> Parameter <code>active</code> The active state of the slider"},{"location":"Zappy/GUI/Component/SliderVolume/#setvalue","title":"setValue","text":"<p>void setValue(float value)</p> <p>Set the value of the slider</p> Parameter <code>value</code> The value of the slider"},{"location":"Zappy/GUI/Component/SliderVolume/#update","title":"update","text":"<p>void update()</p> <p>Update the slider</p>"},{"location":"Zappy/GUI/Component/Text/","title":"Text","text":"<p>class Text: public AComponent</p> <p>Text component</p>"},{"location":"Zappy/GUI/Component/Text/#functions","title":"Functions","text":"Name Description Text Construct a new Text object draw Draw the text resize Resize the text setText Set the text getText Get the text"},{"location":"Zappy/GUI/Component/Text/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/Text/#text_1","title":"Text","text":"<p>Text(std::pair&lt;float, float&gt; pos, std::string text, int fontSize, Color color, std::string font = \"supercell.ttf\")</p> <p>Construct a new Text object</p> Parameter <code>pos</code> The position of the text Parameter <code>text</code> The text to display Parameter <code>fontSize</code> The size of the text Parameter <code>color</code> The color of the text Parameter <code>font</code> The font of the text <p>Warning</p> <p>The font will be loaded using the FontManager. So it must be in the 'assets/fonts/' folder.</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Text/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the text</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Text/#gettext","title":"getText","text":"<p>std::string getText() const</p> <p>Get the text</p> Return <code>std::string</code> The text"},{"location":"Zappy/GUI/Component/Text/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the text</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/Text/#settext","title":"setText","text":"<p>void setText(std::string text)</p> <p>Set the text</p> Parameter <code>text</code> The text to set <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/TextBox/","title":"TextBox","text":"<p>class TextBox: public AComponent</p> <p>TextBox component</p> <p>Note</p> <p>Same as Text component but with a maximum width</p>"},{"location":"Zappy/GUI/Component/TextBox/#functions","title":"Functions","text":"Name Description TextBox Construct a new TextBox object draw Draw the text resize Resize the text setText Set the text of the TextBox"},{"location":"Zappy/GUI/Component/TextBox/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/TextBox/#textbox_1","title":"TextBox","text":"<p>TextBox(std::pair&lt;int, int&gt; pos, int width, std::string text, int fontSize, Color color, std::string font = \"supercell.ttf\")</p> <p>Construct a new TextBox object</p> Parameter <code>pos</code> Position of the TextBox Parameter <code>width</code> Width of the TextBox Parameter <code>text</code> Text of the TextBox Parameter <code>fontSize</code> Font size of the TextBox Parameter <code>color</code> Color of the TextBox Parameter <code>font</code> Font of the TextBox <p>Warning</p> <p>The font will be loaded using the FontManager. So it must be in the 'assets/fonts/' folder.</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/TextBox/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the text</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/TextBox/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the text</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/TextBox/#settext","title":"setText","text":"<p>void setText(std::string text)</p> <p>Set the text of the TextBox</p> Parameter <code>text</code> Text to set <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/TextGroup/","title":"TextGroup","text":"<p>class TextGroup: public AComponent</p> <p>TextGroup class</p>"},{"location":"Zappy/GUI/Component/TextGroup/#functions","title":"Functions","text":"Name Description TextGroup Construct a new Text Group object draw Draw the TextGroup resize Resize the TextGroup setPosX Set the position of the TextGroup setPosY Set the position of the TextGroup addText Add a text to the TextGroup"},{"location":"Zappy/GUI/Component/TextGroup/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/TextGroup/#textgroup_1","title":"TextGroup","text":"<p>TextGroup(std::pair&lt;int, int&gt; pos, int width, int gap)</p> <p>Construct a new Text Group object</p> Parameter <code>pos</code> Parameter <code>width</code> Parameter <code>gap</code> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/TextGroup/#addtext","title":"addText","text":"<p>void addText(std::string name, std::string text, int gap, Color color)</p> <p>Add a text to the TextGroup</p> Parameter <code>name</code> Name of the text Parameter <code>text</code> Text to add Parameter <code>gap</code> Gap between the texts Parameter <code>color</code> Color of the text"},{"location":"Zappy/GUI/Component/TextGroup/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the TextGroup</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/TextGroup/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the TextGroup</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/TextGroup/#setposx","title":"setPosX","text":"<p>void setPosX(float x) override</p> <p>Set the position of the TextGroup</p> Parameter <code>x</code> X position"},{"location":"Zappy/GUI/Component/TextGroup/#setposy","title":"setPosY","text":"<p>void setPosY(float y) override</p> <p>Set the position of the TextGroup</p> Parameter <code>y</code> Y position"},{"location":"Zappy/GUI/Component/TextGroupDraggable/","title":"TextGroupDraggable","text":"<p>class TextGroupDraggable: public AComponent</p> <p>TextGroupDraggable component</p>"},{"location":"Zappy/GUI/Component/TextGroupDraggable/#functions","title":"Functions","text":"Name Description TextGroupDraggable Construct a new TextGroupDraggable object draw Draw the TextGroupDraggable resize Resize the TextGroupDraggable setPosX Set the Pos X object update Update the TextGroupDraggable addText Add a text to the TextGroupDraggable"},{"location":"Zappy/GUI/Component/TextGroupDraggable/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/TextGroupDraggable/#textgroupdraggable_1","title":"TextGroupDraggable","text":"<p>TextGroupDraggable(std::pair&lt;int, int&gt; pos, std::pair&lt;int, int&gt; size, int gap)</p> <p>Construct a new TextGroupDraggable object</p> Parameter <code>pos</code> The position of the component Parameter <code>size</code> The size of the component Parameter <code>gap</code> The gap between texts <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/TextGroupDraggable/#addtext","title":"addText","text":"<p>void addText(std::string name, std::string text, int gap, Color color)</p> <p>Add a text to the TextGroupDraggable</p> Parameter <code>name</code> The name of the text Parameter <code>text</code> The text to add Parameter <code>gap</code> The gap between texts Parameter <code>color</code> The color of the text"},{"location":"Zappy/GUI/Component/TextGroupDraggable/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the TextGroupDraggable</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/TextGroupDraggable/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the TextGroupDraggable</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/TextGroupDraggable/#setposx","title":"setPosX","text":"<p>void setPosX(float x) override</p> <p>Set the Pos X object</p> Parameter <code>x</code> The new x position"},{"location":"Zappy/GUI/Component/TextGroupDraggable/#update","title":"update","text":"<p>void update()</p> <p>Update the TextGroupDraggable</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/TextMessage/","title":"TextMessage","text":"<p>class TextMessage: public AComponent</p> <p>TextMessage class</p>"},{"location":"Zappy/GUI/Component/TextMessage/#functions","title":"Functions","text":"Name Description TextMessage Construct a new TextMessage object draw Draw the TextMessage resize Resize the TextMessage setPosX Set the position of the TextMessage setPosY Set the position of the TextMessage modPosX Modify the position of the TextMessage modPosY Modify the position of the TextMessage getSizeX Get the size on the X axis of the TextMessage getSizeY Get the size on the Y axis of the TextMessage"},{"location":"Zappy/GUI/Component/TextMessage/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/TextMessage/#textmessage_1","title":"TextMessage","text":"<p>TextMessage(std::pair&lt;int, int&gt; pos, int width, std::string name, std::string text, int gap, Color color)</p> <p>Construct a new TextMessage object</p> Parameter <code>pos</code> Position of the TextMessage Parameter <code>width</code> Width of the TextMessage Parameter <code>name</code> Name of the TextMessage Parameter <code>text</code> Text of the TextMessage Parameter <code>gap</code> Gap between the name and the text Parameter <code>color</code> Color of the TextMessage <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/TextMessage/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the TextMessage</p> <p>Warning</p> <p>This function should be called in the raylib context</p>"},{"location":"Zappy/GUI/Component/TextMessage/#getsizex","title":"getSizeX","text":"<p>float getSizeX() const override</p> <p>Get the size on the X axis of the TextMessage</p> Return <code>float</code> Size of the TextMessage"},{"location":"Zappy/GUI/Component/TextMessage/#getsizey","title":"getSizeY","text":"<p>float getSizeY() const override</p> <p>Get the size on the Y axis of the TextMessage</p> Return <code>float</code> Size of the TextMessage"},{"location":"Zappy/GUI/Component/TextMessage/#modposx","title":"modPosX","text":"<p>void modPosX(float x) override</p> <p>Modify the position of the TextMessage</p> Parameter <code>x</code> X position"},{"location":"Zappy/GUI/Component/TextMessage/#modposy","title":"modPosY","text":"<p>void modPosY(float y) override</p> <p>Modify the position of the TextMessage</p> Parameter <code>y</code> Y position"},{"location":"Zappy/GUI/Component/TextMessage/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the TextMessage</p>"},{"location":"Zappy/GUI/Component/TextMessage/#setposx","title":"setPosX","text":"<p>void setPosX(float x) override</p> <p>Set the position of the TextMessage</p> Parameter <code>x</code> X position"},{"location":"Zappy/GUI/Component/TextMessage/#setposy","title":"setPosY","text":"<p>void setPosY(float y) override</p> <p>Set the position of the TextMessage</p> Parameter <code>y</code> Y position"},{"location":"Zappy/GUI/Component/Tile/","title":"Tile","text":"<p>class Tile: public AComponent</p> <p>Tile class</p>"},{"location":"Zappy/GUI/Component/Tile/#functions","title":"Functions","text":"Name Description Tile Construct a new Tile object draw Draw the tile getTopBox Get the Top Box object highlight Set the highlight of the tile select Set the select of the tile"},{"location":"Zappy/GUI/Component/Tile/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/Tile/#tile_1","title":"Tile","text":"<p>Tile(Vector3 pos, Vector3 size, Color color, std::shared_ptr&lt;Ressources&gt; ressourcesDrawer, std::shared_ptr&lt;Zappy::GUI::Ressources::TileRessources&gt; ressources)</p> <p>Construct a new Tile object</p> Parameter <code>pos</code> The position of the tile Parameter <code>size</code> The size of the tile Parameter <code>color</code> The color of the grass of the tile Parameter <code>ressourcesDrawer</code> A pointer to the ressources drawer Parameter <code>ressources</code> A pointer to the tile ressources"},{"location":"Zappy/GUI/Component/Tile/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the tile</p>"},{"location":"Zappy/GUI/Component/Tile/#gettopbox","title":"getTopBox","text":"<p>BoundingBox getTopBox() const</p> <p>Get the Top Box object</p> Return <code>BoundingBox</code> The top box of the tile"},{"location":"Zappy/GUI/Component/Tile/#highlight","title":"highlight","text":"<p>void highlight(bool highlight)</p> <p>Set the highlight of the tile</p> Parameter <code>highlight</code> The highlight value"},{"location":"Zappy/GUI/Component/Tile/#select","title":"select","text":"<p>void select(bool select)</p> <p>Set the select of the tile</p> Parameter <code>select</code> The select value"},{"location":"Zappy/GUI/Component/TileMap/","title":"TileMap","text":"<p>class TileMap: public AComponent</p> <p>TileMap class</p>"},{"location":"Zappy/GUI/Component/TileMap/#functions","title":"Functions","text":"Name Description TileMap Construct a new Tile Map object draw Draw the tile map update Update the tile map tiles Set the tiles object unhighlight Disable the highlight of the highlighted tile hasSelected Check if a tile is selected getSelected Get the coordinates of the selected tile"},{"location":"Zappy/GUI/Component/TileMap/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/TileMap/#tilemap_1","title":"TileMap","text":"<p>TileMap(Vector3 pos, std::pair&lt;int, int&gt; size, int tileSize, std::shared_ptr&lt;Ressources&gt; ressources)</p> <p>Construct a new Tile Map object</p> Parameter <code>pos</code> The position of the tile map Parameter <code>size</code> The size of the tile map Parameter <code>tileSize</code> The size of the tile Parameter <code>ressources</code> A pointer to the ressources drawer"},{"location":"Zappy/GUI/Component/TileMap/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the tile map</p>"},{"location":"Zappy/GUI/Component/TileMap/#getselected","title":"getSelected","text":"<p>std::pair&lt;int, int&gt; getSelected() const</p> <p>Get the coordinates of the selected tile</p> Return <code>std::pair&lt;int, int&gt;</code> The coordinates of the selected tile"},{"location":"Zappy/GUI/Component/TileMap/#hasselected","title":"hasSelected","text":"<p>bool hasSelected() const</p> <p>Check if a tile is selected</p> Return <code>true</code> If a tile is selected, <code>false</code> otherwise"},{"location":"Zappy/GUI/Component/TileMap/#tiles","title":"tiles","text":"<p>std::vector&lt;std::vector&lt;std::shared_ptr&lt;Tile&gt;&gt;&gt; tiles()</p> <p>Set the tiles object</p> Return <code>tiles</code> The tiles object"},{"location":"Zappy/GUI/Component/TileMap/#unhighlight","title":"unhighlight","text":"<p>void unhighlight()</p> <p>Disable the highlight of the highlighted tile</p>"},{"location":"Zappy/GUI/Component/TileMap/#update","title":"update","text":"<p>void update(std::shared_ptr&lt;Raylib::Render&gt; render, std::shared_ptr&lt;Inspecter&gt; inspecter)</p> <p>Update the tile map</p>"},{"location":"Zappy/GUI/Component/VolumeSection/","title":"VolumeSection","text":"<p>class VolumeSection : public AComponent</p> <p>VolumeSection class</p>"},{"location":"Zappy/GUI/Component/VolumeSection/#functions","title":"Functions","text":"Name Description VolumeSection Construct a new VolumeSection object draw Draw the volume section resize Resize the volume section update Update the volume section setText Set the text of the volume section"},{"location":"Zappy/GUI/Component/VolumeSection/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Component/VolumeSection/#volumesection_1","title":"VolumeSection","text":"<p>VolumeSection(std::pair&lt;float, float&gt; pos, std::pair&lt;float, float&gt; size, std::string text, void (Zappy::GUI::Sfml::SoundManager::*callback)(float))</p> <p>Construct a new VolumeSection object</p> Parameter <code>pos</code> Position of the volume section Parameter <code>size</code> Size of the volume section Parameter <code>text</code> Text of the volume section Parameter <code>callback</code> Callback of the volume section (call a method from SoundManager)"},{"location":"Zappy/GUI/Component/VolumeSection/#draw","title":"draw","text":"<p>void draw() override</p> <p>Draw the volume section</p>"},{"location":"Zappy/GUI/Component/VolumeSection/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the volume section</p>"},{"location":"Zappy/GUI/Component/VolumeSection/#settext","title":"setText","text":"<p>void setText(std::string text)</p> <p>Set the text of the volume section</p> Parameter <code>text</code> Text to set"},{"location":"Zappy/GUI/Component/VolumeSection/#update","title":"update","text":"<p>void update()</p> <p>Update the volume section</p>"},{"location":"Zappy/GUI/IScene/","title":"IScene","text":"<p>class IScene</p> <p>IScene class</p>"},{"location":"Zappy/GUI/IScene/#functions","title":"Functions","text":"Name Description start Start the scene destroy Destroy the scene update Update the scene update Update the scene draw3D Draw the 3D objects of the scene draw2D Draw the 2D objects of the scene nextScene Get the next scene isReady Check if the scene is ready resize Resize the scene"},{"location":"Zappy/GUI/IScene/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/IScene/#destroy","title":"destroy","text":"<p>virtual void destroy() = 0</p> <p>Destroy the scene</p> <p>Warning</p> <p>After the destruction of the scene, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/IScene/#draw2d","title":"draw2D","text":"<p>virtual void draw2D() = 0</p> <p>Draw the 2D objects of the scene</p>"},{"location":"Zappy/GUI/IScene/#draw3d","title":"draw3D","text":"<p>virtual void draw3D() = 0</p> <p>Draw the 3D objects of the scene</p>"},{"location":"Zappy/GUI/IScene/#isready","title":"isReady","text":"<p>virtual bool isReady() = 0</p> <p>Check if the scene is ready</p> Return <code>bool</code> If the scene is ready"},{"location":"Zappy/GUI/IScene/#nextscene","title":"nextScene","text":"<p>virtual std::string nextScene() = 0</p> <p>Get the next scene</p> Return <code>std::string</code> The next scene"},{"location":"Zappy/GUI/IScene/#resize","title":"resize","text":"<p>virtual void resize() = 0</p> <p>Resize the scene</p>"},{"location":"Zappy/GUI/IScene/#start","title":"start","text":"<p>virtual void start() = 0</p> <p>Start the scene</p>"},{"location":"Zappy/GUI/IScene/#update","title":"update","text":"<p>virtual void update() = 0</p> <p>Update the scene</p> <p>virtual void update(bool isGameReady) = 0</p> <p>Update the scene</p> Parameter <code>isGameReady</code> If the game is ready"},{"location":"Zappy/GUI/Parsing/","title":"Parsing","text":"<p>class Parsing</p> <p>Parsing class</p>"},{"location":"Zappy/GUI/Parsing/#types","title":"Types","text":"Name Description ParsingError Parsing error class Help Help class"},{"location":"Zappy/GUI/Parsing/#functions","title":"Functions","text":"Name Description Parsing Constructor of Parsing class getPort Get the port getMachine Get the machine _parseArgPort Parse the port argument _parseArgMachine Parse the machine argument"},{"location":"Zappy/GUI/Parsing/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Parsing/#parsing_1","title":"Parsing","text":"<p>Parsing(int argc, char **argv)</p> <p>Constructor of Parsing class</p> Parameter <code>argc</code> The number of arguments Parameter <code>argv</code> The arguments"},{"location":"Zappy/GUI/Parsing/#_parseargmachine","title":"_parseArgMachine","text":"<p>void _parseArgMachine(int argc, char **argv, int i)</p> <p>Parse the machine argument</p> Parameter <code>argc</code> The number of arguments Parameter <code>argv</code> The arguments Parameter <code>i</code> The index of the argument"},{"location":"Zappy/GUI/Parsing/#_parseargport","title":"_parseArgPort","text":"<p>void _parseArgPort(int argc, char **argv, int i)</p> <p>Parse the port argument</p> Parameter <code>argc</code> The number of arguments Parameter <code>argv</code> The arguments Parameter <code>i</code> The index of the argument"},{"location":"Zappy/GUI/Parsing/#getmachine","title":"getMachine","text":"<p>std::string getMachine()</p> <p>Get the machine</p> Return <code>std::string</code> The machine <p>Warning</p> <p>This function have to be used after the constructor. Else it will return an empty string</p>"},{"location":"Zappy/GUI/Parsing/#getport","title":"getPort","text":"<p>int getPort()</p> <p>Get the port</p> Return <code>int</code> The port <p>Warning</p> <p>This function have to be used after the constructor. Else it will return -1</p>"},{"location":"Zappy/GUI/Parsing/Help/","title":"Help","text":"<p>class Help : public std::exception</p> <p>Help class</p> <p>Note</p> <p>This class is used to throw help errors</p>"},{"location":"Zappy/GUI/Parsing/ParsingError/","title":"ParsingError","text":"<p>class ParsingError : public std::exception</p> <p>Parsing error class</p> <p>Note</p> <p>This class is used to throw parsing errors</p>"},{"location":"Zappy/GUI/Raylib/","title":"Raylib","text":"ColorManager"},{"location":"Zappy/GUI/Raylib/#types","title":"Types","text":"Name Description FontManager FontManager class ModelManager ModelManager class Render A class to manage the rendering TextureManager TextureManager class View View class. This class is used to manage the camera"},{"location":"Zappy/GUI/Raylib/ColorManager/","title":"ColorManager","text":""},{"location":"Zappy/GUI/Raylib/ColorManager/#functions","title":"Functions","text":"Name Description Darker Darken a color Lighter Lighten a color"},{"location":"Zappy/GUI/Raylib/ColorManager/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Raylib/ColorManager/#darker","title":"Darker","text":"<p>Color Darker(Color color, float percent)</p> <p>Darken a color</p> Parameter <code>color</code> The color to darken Parameter <code>percent</code> The percent to darken"},{"location":"Zappy/GUI/Raylib/ColorManager/#lighter","title":"Lighter","text":"<p>Color Lighter(Color color, float percent)</p> <p>Lighten a color</p> Parameter <code>color</code> The color to lighten Parameter <code>percent</code> The percent to lighten"},{"location":"Zappy/GUI/Raylib/FontManager/","title":"FontManager","text":"<p>class FontManager</p> <p>FontManager class</p> <p>Note</p> <p>This class is a singleton</p>"},{"location":"Zappy/GUI/Raylib/FontManager/#functions","title":"Functions","text":"Name Description get Get the FontManager instance getFont Get a font destroy Destroy the FontManager instance unload Unload all the fonts reload Reload all the fonts from the references"},{"location":"Zappy/GUI/Raylib/FontManager/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Raylib/FontManager/#destroy","title":"destroy","text":"<p>void destroy()</p> <p>Destroy the FontManager instance</p> <p>Warning</p> <p>After the destruction of the instance, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/Raylib/FontManager/#get","title":"get","text":"<p>static FontManager *get()</p> <p>Get the FontManager instance</p>"},{"location":"Zappy/GUI/Raylib/FontManager/#getfont","title":"getFont","text":"<p>Font getFont(std::string &amp;fileName)</p> <p>Get a font</p> Parameter <code>fileName</code> The font file name Return <code>font</code> The font <p>Note</p> <p>This function will load the font if it's not already loaded</p>"},{"location":"Zappy/GUI/Raylib/FontManager/#reload","title":"reload","text":"<p>void reload()</p> <p>Reload all the fonts from the references</p>"},{"location":"Zappy/GUI/Raylib/FontManager/#unload","title":"unload","text":"<p>void unload()</p> <p>Unload all the fonts</p> <p>Note</p> <p>This function do not clear the references</p>"},{"location":"Zappy/GUI/Raylib/ModelManager/","title":"ModelManager","text":"<p>class ModelManager</p> <p>ModelManager class</p> <p>Note</p> <p>This class is a singleton</p>"},{"location":"Zappy/GUI/Raylib/ModelManager/#functions","title":"Functions","text":"Name Description get Get the ModelManager instance getModel Get a model destroy Destroy the ModelManager instance unload Unload all the models reload Reload all the models from the references"},{"location":"Zappy/GUI/Raylib/ModelManager/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Raylib/ModelManager/#destroy","title":"destroy","text":"<p>void destroy()</p> <p>Destroy the ModelManager instance</p> <p>Warning</p> <p>After the destruction of the instance, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/Raylib/ModelManager/#get","title":"get","text":"<p>static ModelManager *get()</p> <p>Get the ModelManager instance</p>"},{"location":"Zappy/GUI/Raylib/ModelManager/#getmodel","title":"getModel","text":"<p>Model getModel(std::string &amp;fileName)</p> <p>Get a model</p> Parameter <code>fileName</code> The model file name Return <code>model</code> The model <p>Note</p> <p>This function will load the model if it's not already loaded</p>"},{"location":"Zappy/GUI/Raylib/ModelManager/#reload","title":"reload","text":"<p>void reload()</p> <p>Reload all the models from the references</p>"},{"location":"Zappy/GUI/Raylib/ModelManager/#unload","title":"unload","text":"<p>void unload()</p> <p>Unload all the models</p> <p>Note</p> <p>This function do not clear the references</p>"},{"location":"Zappy/GUI/Raylib/Render/","title":"Render","text":"<p>class Render</p> <p>A class to manage the rendering</p>"},{"location":"Zappy/GUI/Raylib/Render/#functions","title":"Functions","text":"Name Description Render Construct a new Render object destroy Destroy the window view Get the view getHeight Get the height of the window getWidth Get the width of the window getFps Get the dimensions of the window getVolumeMusique Get the volume of the music getEffetSonore Get the volume of the sound effect setHeight Set the height of the window setWidth Set the width of the window setDimensions Set the dimensions of the window setFps Set the fps of the window setVolumeMusique Set the volume of the music setEffetSonore Set the volume of the sound effect"},{"location":"Zappy/GUI/Raylib/Render/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Raylib/Render/#render_1","title":"Render","text":"<p>Render(int height = 600, int width = 800, int fps = 60)</p> <p>Construct a new Render object</p> Parameter <code>height</code> The height of the window Parameter <code>width</code> The width of the window Parameter <code>fps</code> The fps of the window"},{"location":"Zappy/GUI/Raylib/Render/#destroy","title":"destroy","text":"<p>void destroy()</p> <p>Destroy the window</p> <p>Warning</p> <p>After the destruction of the window, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/Raylib/Render/#geteffetsonore","title":"getEffetSonore","text":"<p>float getEffetSonore() const</p> <p>Get the volume of the sound effect</p> Return <code>float</code> The volume of the sound effect"},{"location":"Zappy/GUI/Raylib/Render/#getfps","title":"getFps","text":"<p>int getFps() const</p> <p>Get the dimensions of the window</p> Return <code>std::pair&lt;int, int&gt;</code> The dimensions of the window"},{"location":"Zappy/GUI/Raylib/Render/#getheight","title":"getHeight","text":"<p>int getHeight() const</p> <p>Get the height of the window</p> Return <code>int</code> The height of the window"},{"location":"Zappy/GUI/Raylib/Render/#getvolumemusique","title":"getVolumeMusique","text":"<p>float getVolumeMusique() const</p> <p>Get the volume of the music</p> Return <code>float</code> The volume of the music"},{"location":"Zappy/GUI/Raylib/Render/#getwidth","title":"getWidth","text":"<p>int getWidth() const</p> <p>Get the width of the window</p> Return <code>int</code> The width of the window"},{"location":"Zappy/GUI/Raylib/Render/#setdimensions","title":"setDimensions","text":"<p>void setDimensions(int height, int width)</p> <p>Set the dimensions of the window</p> Parameter <code>height</code> The new height Parameter <code>width</code> The new width"},{"location":"Zappy/GUI/Raylib/Render/#seteffetsonore","title":"setEffetSonore","text":"<p>void setEffetSonore(float effetSonore)</p> <p>Set the volume of the sound effect</p> Parameter <code>effetSonore</code> The new volume"},{"location":"Zappy/GUI/Raylib/Render/#setfps","title":"setFps","text":"<p>void setFps(int fps)</p> <p>Set the fps of the window</p> Parameter <code>fps</code> The new fps"},{"location":"Zappy/GUI/Raylib/Render/#setheight","title":"setHeight","text":"<p>void setHeight(int height)</p> <p>Set the height of the window</p> Parameter <code>height</code> The new height"},{"location":"Zappy/GUI/Raylib/Render/#setvolumemusique","title":"setVolumeMusique","text":"<p>void setVolumeMusique(float volumeMusique)</p> <p>Set the volume of the music</p> Parameter <code>volumeMusique</code> The new volume"},{"location":"Zappy/GUI/Raylib/Render/#setwidth","title":"setWidth","text":"<p>void setWidth(int width)</p> <p>Set the width of the window</p> Parameter <code>width</code> The new width"},{"location":"Zappy/GUI/Raylib/Render/#view","title":"view","text":"<p>std::shared_ptr&lt;View&gt; view() const</p> <p>Get the view</p> Return <code>std::shared_ptr&lt;View&gt;</code> The view"},{"location":"Zappy/GUI/Raylib/TextureManager/","title":"TextureManager","text":"<p>class TextureManager</p> <p>TextureManager class</p> <p>Note</p> <p>This class is a singleton</p>"},{"location":"Zappy/GUI/Raylib/TextureManager/#functions","title":"Functions","text":"Name Description get Get the TextureManager instance getTexture Get a texture getTexture Get a texture destroy Destroy the TextureManager instance unload Unload all the textures reload Reload all the textures from the references"},{"location":"Zappy/GUI/Raylib/TextureManager/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Raylib/TextureManager/#destroy","title":"destroy","text":"<p>void destroy()</p> <p>Destroy the TextureManager instance</p> <p>Warning</p> <p>After the destruction of the instance, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/Raylib/TextureManager/#get","title":"get","text":"<p>static TextureManager *get()</p> <p>Get the TextureManager instance</p>"},{"location":"Zappy/GUI/Raylib/TextureManager/#gettexture","title":"getTexture","text":"<p>Texture getTexture(std::string &amp;fileName)</p> <p>Get a texture</p> Parameter <code>fileName</code> The texture file name Return <code>texture</code> The texture <p>Note</p> <p>This function will load the texture if it's not already loaded</p> <p>Texture getTexture(Color color, std::string &amp;name)</p> <p>Get a texture</p> Parameter <code>color</code> The color of the texture Parameter <code>name</code> The name of the texture Return <code>texture</code> The texture <p>Note</p> <p>This function will load the texture if it's not already loaded</p> <p>Note</p> <p>The loading of the texture is based on the name</p>"},{"location":"Zappy/GUI/Raylib/TextureManager/#reload","title":"reload","text":"<p>void reload()</p> <p>Reload all the textures from the references</p>"},{"location":"Zappy/GUI/Raylib/TextureManager/#unload","title":"unload","text":"<p>void unload()</p> <p>Unload all the textures</p> <p>Note</p> <p>This function do not clear the references</p>"},{"location":"Zappy/GUI/Raylib/View/","title":"View","text":"<p>class View</p> <p>View class. This class is used to manage the camera</p>"},{"location":"Zappy/GUI/Raylib/View/#functions","title":"Functions","text":"Name Description View Construct a new View object getCamera Get the camera getPosition Get the position of the camera getTarget Get the target of the camera getUp Get the up of the camera getFovy Get the fovy of the camera isMouseFollowing Get if the camera is following the mouse setPosition Set the position of the camera modPosition Mod the position of the camera setTarget Set the target of the camera modTarget Mod the target of the camera setUp Set the up of the camera modUp Mod the up of the camera setFovy Set the fovy of the camera modFovy Mod the fovy of the camera setMouseFollowing Set if the camera is following the mouse disableCamera Disable the camera enableCamera Enable the camera update Update the camera _getFront Get the front movement of the camera _getUp Get the up movement of the camera _getSide Get the side movement of the camera _moveFront Move the camera front _moveSide Move the camera side _moveUp Move the camera up _lookUp Look up _lookSide Look down"},{"location":"Zappy/GUI/Raylib/View/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Raylib/View/#view_1","title":"View","text":"<p>View( Vector3 position = (Vector3){ -7.04f, 11.11f, -27.61f }, Vector3 target = (Vector3){-7.03f, 10.26f, -22.33f}, Vector3 up = (Vector3){0.0f, 1.0f, 0.0f}, float fovy = 45.0f )</p> <p>Construct a new View object</p> Parameter <code>position</code> The position of the camera. Default is (-7.04f, 11.11f, -27.61f) Parameter <code>target</code> The target of the camera. Default is (-7.03f, 10.26f, -22.33f) Parameter <code>up</code> The up of the camera. Default is (0.0f, 1.0f, 0.0f) Parameter <code>fovy</code> The fovy of the camera. Default is 45.0f"},{"location":"Zappy/GUI/Raylib/View/#_getfront","title":"_getFront","text":"<p>Vector3 _getFront()</p> <p>Get the front movement of the camera</p>"},{"location":"Zappy/GUI/Raylib/View/#_getside","title":"_getSide","text":"<p>Vector3 _getSide()</p> <p>Get the side movement of the camera</p>"},{"location":"Zappy/GUI/Raylib/View/#_getup","title":"_getUp","text":"<p>Vector3 _getUp()</p> <p>Get the up movement of the camera</p>"},{"location":"Zappy/GUI/Raylib/View/#_lookside","title":"_lookSide","text":"<p>void _lookSide(float speed)</p> <p>Look down</p> Parameter <code>speed</code> The speed of the movement"},{"location":"Zappy/GUI/Raylib/View/#_lookup","title":"_lookUp","text":"<p>void _lookUp(float speed)</p> <p>Look up</p> Parameter <code>speed</code> The speed of the movement"},{"location":"Zappy/GUI/Raylib/View/#_movefront","title":"_moveFront","text":"<p>void _moveFront(float speed)</p> <p>Move the camera front</p> Parameter <code>speed</code> The speed of the movement"},{"location":"Zappy/GUI/Raylib/View/#_moveside","title":"_moveSide","text":"<p>void _moveSide(float speed)</p> <p>Move the camera side</p> Parameter <code>speed</code> The speed of the movement"},{"location":"Zappy/GUI/Raylib/View/#_moveup","title":"_moveUp","text":"<p>void _moveUp(float speed)</p> <p>Move the camera up</p> Parameter <code>speed</code> The speed of the movement"},{"location":"Zappy/GUI/Raylib/View/#disablecamera","title":"disableCamera","text":"<p>void disableCamera()</p> <p>Disable the camera</p>"},{"location":"Zappy/GUI/Raylib/View/#enablecamera","title":"enableCamera","text":"<p>void enableCamera()</p> <p>Enable the camera</p>"},{"location":"Zappy/GUI/Raylib/View/#getcamera","title":"getCamera","text":"<p>[[ nodiscard ]] Camera getCamera() const</p> <p>Get the camera</p> Return <code>Camera</code> The camera"},{"location":"Zappy/GUI/Raylib/View/#getfovy","title":"getFovy","text":"<p>[[ nodiscard ]] float getFovy() const</p> <p>Get the fovy of the camera</p> Return <code>float</code> The fovy of the camera"},{"location":"Zappy/GUI/Raylib/View/#getposition","title":"getPosition","text":"<p>[[ nodiscard ]] Vector3 getPosition() const</p> <p>Get the position of the camera</p> Return <code>Vector3</code> The position of the camera"},{"location":"Zappy/GUI/Raylib/View/#gettarget","title":"getTarget","text":"<p>[[ nodiscard ]] Vector3 getTarget() const</p> <p>Get the target of the camera</p> Return <code>Vector3</code> The target of the camera"},{"location":"Zappy/GUI/Raylib/View/#getup","title":"getUp","text":"<p>[[ nodiscard ]] Vector3 getUp() const</p> <p>Get the up of the camera</p> Return <code>Vector3</code> The up of the camera"},{"location":"Zappy/GUI/Raylib/View/#ismousefollowing","title":"isMouseFollowing","text":"<p>[[ nodiscard ]] bool isMouseFollowing() const</p> <p>Get if the camera is following the mouse</p> Return <code>bool</code> True if the camera is following the mouse, false otherwise"},{"location":"Zappy/GUI/Raylib/View/#modfovy","title":"modFovy","text":"<p>void modFovy(float fovy)</p> <p>Mod the fovy of the camera</p> Parameter <code>fovy</code> The fovy to add to the current fovy"},{"location":"Zappy/GUI/Raylib/View/#modposition","title":"modPosition","text":"<p>void modPosition(Vector3 position)</p> <p>Mod the position of the camera</p> Parameter <code>position</code> The position to add to the current position"},{"location":"Zappy/GUI/Raylib/View/#modtarget","title":"modTarget","text":"<p>void modTarget(Vector3 target)</p> <p>Mod the target of the camera</p> Parameter <code>target</code> The target to add to the current target"},{"location":"Zappy/GUI/Raylib/View/#modup","title":"modUp","text":"<p>void modUp(Vector3 up)</p> <p>Mod the up of the camera</p> Parameter <code>up</code> The up to add to the current up"},{"location":"Zappy/GUI/Raylib/View/#setfovy","title":"setFovy","text":"<p>void setFovy(float fovy)</p> <p>Set the fovy of the camera</p> Parameter <code>fovy</code> The new fovy of the camera"},{"location":"Zappy/GUI/Raylib/View/#setmousefollowing","title":"setMouseFollowing","text":"<p>void setMouseFollowing(bool mouseFollowing)</p> <p>Set if the camera is following the mouse</p> Parameter <code>mouseFollowing</code> True if the camera is following the mouse, false otherwise"},{"location":"Zappy/GUI/Raylib/View/#setposition","title":"setPosition","text":"<p>void setPosition(Vector3 position)</p> <p>Set the position of the camera</p> Parameter <code>position</code> The new position of the camera"},{"location":"Zappy/GUI/Raylib/View/#settarget","title":"setTarget","text":"<p>void setTarget(Vector3 target)</p> <p>Set the target of the camera</p> Parameter <code>target</code> The new target of the camera"},{"location":"Zappy/GUI/Raylib/View/#setup","title":"setUp","text":"<p>void setUp(Vector3 up)</p> <p>Set the up of the camera</p> Parameter <code>up</code> The new up of the camera"},{"location":"Zappy/GUI/Raylib/View/#update","title":"update","text":"<p>void update()</p> <p>Update the camera</p>"},{"location":"Zappy/GUI/Ressources/","title":"Ressources","text":""},{"location":"Zappy/GUI/Ressources/#types","title":"Types","text":"Name Description Eggs Eggs class Players Players class Ref Reference to the ressources Ressources Ressources class TileRessources TileRessources class"},{"location":"Zappy/GUI/Ressources/Eggs/","title":"Eggs","text":"<p>class Eggs</p> <p>Eggs class</p>"},{"location":"Zappy/GUI/Ressources/Eggs/#functions","title":"Functions","text":"Name Description Eggs Eggs constructor getId Get the id of the egg getX Get the X position of the egg setX Set the X position of the egg getY Get the Y position of the egg setY Set the Y position of the egg getTeam Get the team of the egg"},{"location":"Zappy/GUI/Ressources/Eggs/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Ressources/Eggs/#eggs_1","title":"Eggs","text":"<p>Eggs(int id, int x, int y, std::string team)</p> <p>Eggs constructor</p> Parameter <code>id</code> The id of the egg Parameter <code>x</code> The x position of the egg Parameter <code>y</code> The y position of the egg Parameter <code>team</code> The team of the egg"},{"location":"Zappy/GUI/Ressources/Eggs/#getid","title":"getId","text":"<p>int getId() const</p> <p>Get the id of the egg</p> Return <code>int</code> The id of the egg"},{"location":"Zappy/GUI/Ressources/Eggs/#getteam","title":"getTeam","text":"<p>std::string getTeam() const</p> <p>Get the team of the egg</p> Return <code>std::string</code> The team of the egg"},{"location":"Zappy/GUI/Ressources/Eggs/#getx","title":"getX","text":"<p>int getX() const</p> <p>Get the X position of the egg</p> Return <code>int</code> The X position of the egg"},{"location":"Zappy/GUI/Ressources/Eggs/#gety","title":"getY","text":"<p>int getY() const</p> <p>Get the Y position of the egg</p> Return <code>int</code> The Y position of the egg"},{"location":"Zappy/GUI/Ressources/Eggs/#setx","title":"setX","text":"<p>void setX(int x)</p> <p>Set the X position of the egg</p> Parameter <code>x</code> The X position of the egg"},{"location":"Zappy/GUI/Ressources/Eggs/#sety","title":"setY","text":"<p>void setY(int y)</p> <p>Set the Y position of the egg</p> Parameter <code>y</code> The Y position of the egg"},{"location":"Zappy/GUI/Ressources/Players/","title":"Players","text":"<p>class Players</p> <p>Players class</p>"},{"location":"Zappy/GUI/Ressources/Players/#functions","title":"Functions","text":"Name Description Players Players constructor getId Get the id of the player getX Get the X position of the player setX Set the X position of the player getY Get the Y position of the player setY Set the Y position of the player getLinemate Get the linemate in the player inventory setLinemate Set the linemate in the player inventory getDeraumere Get the deraumere in the player inventory setDeraumere Set the deraumere in the player inventory getSibur Get the sibur in the player inventory setSibur Set the sibur in the player inventory getMendiane Get the mendiane in the player inventory setMendiane Set the mendiane in the player inventory getPhiras Get the phiras in the player inventory setPhiras Set the phiras in the player inventory getThystame Get the thystame in the player inventory setThystame Set the thystame in the player inventory getFood Get the food in the player inventory setFood Set the food in the player inventory getTeam Get the team of the player getLvl Get the level of the player setLvl Set the level of the player"},{"location":"Zappy/GUI/Ressources/Players/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Ressources/Players/#players_1","title":"Players","text":"<p>Players(int id, int x, int y, std::string team)</p> <p>Players constructor</p> Parameter <code>id</code> The id of the player Parameter <code>x</code> The x position of the player Parameter <code>y</code> The y position of the player Parameter <code>team</code> The team of the player"},{"location":"Zappy/GUI/Ressources/Players/#getderaumere","title":"getDeraumere","text":"<p>int getDeraumere() const</p> <p>Get the deraumere in the player inventory</p> Return <code>int</code> The deraumere in the player inventory"},{"location":"Zappy/GUI/Ressources/Players/#getfood","title":"getFood","text":"<p>int getFood() const</p> <p>Get the food in the player inventory</p> Return <code>int</code> The food in the player inventory"},{"location":"Zappy/GUI/Ressources/Players/#getid","title":"getId","text":"<p>int getId() const</p> <p>Get the id of the player</p> Return <code>int</code> The id of the player"},{"location":"Zappy/GUI/Ressources/Players/#getlinemate","title":"getLinemate","text":"<p>int getLinemate() const</p> <p>Get the linemate in the player inventory</p> Return <code>int</code> The linemate in the player inventory"},{"location":"Zappy/GUI/Ressources/Players/#getlvl","title":"getLvl","text":"<p>int getLvl() const</p> <p>Get the level of the player</p> Return <code>int</code> The level of the player"},{"location":"Zappy/GUI/Ressources/Players/#getmendiane","title":"getMendiane","text":"<p>int getMendiane() const</p> <p>Get the mendiane in the player inventory</p> Return <code>int</code> The mendiane in the player inventory"},{"location":"Zappy/GUI/Ressources/Players/#getphiras","title":"getPhiras","text":"<p>int getPhiras() const</p> <p>Get the phiras in the player inventory</p> Return <code>int</code> The phiras in the player inventory"},{"location":"Zappy/GUI/Ressources/Players/#getsibur","title":"getSibur","text":"<p>int getSibur() const</p> <p>Get the sibur in the player inventory</p> Return <code>int</code> The sibur in the player inventory"},{"location":"Zappy/GUI/Ressources/Players/#getteam","title":"getTeam","text":"<p>std::string getTeam() const</p> <p>Get the team of the player</p> Return <code>std::string</code> The team of the player"},{"location":"Zappy/GUI/Ressources/Players/#getthystame","title":"getThystame","text":"<p>int getThystame() const</p> <p>Get the thystame in the player inventory</p> Return <code>int</code> The thystame in the player inventory"},{"location":"Zappy/GUI/Ressources/Players/#getx","title":"getX","text":"<p>int getX() const</p> <p>Get the X position of the player</p> Return <code>int</code> The X position of the player"},{"location":"Zappy/GUI/Ressources/Players/#gety","title":"getY","text":"<p>int getY() const</p> <p>Get the Y position of the player</p> Return <code>int</code> The Y position of the player"},{"location":"Zappy/GUI/Ressources/Players/#setderaumere","title":"setDeraumere","text":"<p>void setDeraumere(int deraumere)</p> <p>Set the deraumere in the player inventory</p> Parameter <code>deraumere</code> The deraumere in the player inventory"},{"location":"Zappy/GUI/Ressources/Players/#setfood","title":"setFood","text":"<p>void setFood(int food)</p> <p>Set the food in the player inventory</p> Parameter <code>food</code> The food in the player inventory"},{"location":"Zappy/GUI/Ressources/Players/#setlinemate","title":"setLinemate","text":"<p>void setLinemate(int linemate)</p> <p>Set the linemate in the player inventory</p> Parameter <code>linemate</code> The linemate in the player inventory"},{"location":"Zappy/GUI/Ressources/Players/#setlvl","title":"setLvl","text":"<p>void setLvl(int lvl)</p> <p>Set the level of the player</p> Parameter <code>lvl</code> The level of the player"},{"location":"Zappy/GUI/Ressources/Players/#setmendiane","title":"setMendiane","text":"<p>void setMendiane(int mendiane)</p> <p>Set the mendiane in the player inventory</p> Parameter <code>mendiane</code> The mendiane in the player inventory"},{"location":"Zappy/GUI/Ressources/Players/#setphiras","title":"setPhiras","text":"<p>void setPhiras(int phiras)</p> <p>Set the phiras in the player inventory</p> Parameter <code>phiras</code> The phiras in the player inventory"},{"location":"Zappy/GUI/Ressources/Players/#setsibur","title":"setSibur","text":"<p>void setSibur(int sibur)</p> <p>Set the sibur in the player inventory</p> Parameter <code>sibur</code> The sibur in the player inventory"},{"location":"Zappy/GUI/Ressources/Players/#setthystame","title":"setThystame","text":"<p>void setThystame(int thystame)</p> <p>Set the thystame in the player inventory</p> Parameter <code>thystame</code> The thystame in the player inventory"},{"location":"Zappy/GUI/Ressources/Players/#setx","title":"setX","text":"<p>void setX(int x)</p> <p>Set the X position of the player</p> Parameter <code>x</code> The X position of the player"},{"location":"Zappy/GUI/Ressources/Players/#sety","title":"setY","text":"<p>void setY(int y)</p> <p>Set the Y position of the player</p> Parameter <code>y</code> The Y position of the player"},{"location":"Zappy/GUI/Ressources/Ref/","title":"Ref","text":"<p>class Ref</p> <p>Reference to the ressources</p> <p>Note</p> <p>this class is a singleton</p>"},{"location":"Zappy/GUI/Ressources/Ref/#variables","title":"Variables","text":"Name Description ressources Get the ressources"},{"location":"Zappy/GUI/Ressources/Ref/#functions","title":"Functions","text":"Name Description get Get the Ref object"},{"location":"Zappy/GUI/Ressources/Ref/#variable-details","title":"Variable Details","text":""},{"location":"Zappy/GUI/Ressources/Ref/#ressources","title":"ressources","text":"<p>std::shared_ptr&lt;Ressources&gt; ressources</p> <p>Get the ressources</p> Return <code>ressources</code> The ressources"},{"location":"Zappy/GUI/Ressources/Ref/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Ressources/Ref/#get","title":"get","text":"<p>static Ref *get()</p> <p>Get the Ref object</p>"},{"location":"Zappy/GUI/Ressources/Ressources/","title":"Ressources","text":"<p>class Ressources</p> <p>Ressources class</p>"},{"location":"Zappy/GUI/Ressources/Ressources/#variables","title":"Variables","text":"Name Description tileRessources A table that represent the map players All the registered players eggs All the registered eggs teamsColor The teams color mapSet A boolean that represent if the map is set"},{"location":"Zappy/GUI/Ressources/Ressources/#functions","title":"Functions","text":"Name Description Ressources Ressources constructor setPlayerOnMap Set all the registered player on the map based on their position addPlayer Register a player setEggOnMap Set all the registered egg on the map based on their position addEgg Register an egg getPlayerFromId Get a player from his id getEggFromId Get an egg from his id getTileFromPos Get a tile from his position getMapDimensions Get the dimensions of the map"},{"location":"Zappy/GUI/Ressources/Ressources/#variable-details","title":"Variable Details","text":""},{"location":"Zappy/GUI/Ressources/Ressources/#eggs","title":"eggs","text":"<p>std::vector&lt;std::shared_ptr&lt;Eggs&gt;&gt; eggs</p> <p>All the registered eggs</p>"},{"location":"Zappy/GUI/Ressources/Ressources/#mapset","title":"mapSet","text":"<p>bool mapSet</p> <p>A boolean that represent if the map is set</p>"},{"location":"Zappy/GUI/Ressources/Ressources/#players","title":"players","text":"<p>std::vector&lt;std::shared_ptr&lt;Players&gt;&gt; players</p> <p>All the registered players</p>"},{"location":"Zappy/GUI/Ressources/Ressources/#teamscolor","title":"teamsColor","text":"<p>std::unordered_map&lt;std::string, Color&gt; teamsColor</p> <p>The teams color</p>"},{"location":"Zappy/GUI/Ressources/Ressources/#tileressources","title":"tileRessources","text":"<p>std::vector&lt;std::vector&lt;std::shared_ptr&lt;TileRessources&gt;&gt;&gt; tileRessources</p> <p>A table that represent the map</p>"},{"location":"Zappy/GUI/Ressources/Ressources/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Ressources/Ressources/#ressources_1","title":"Ressources","text":"<p>Ressources()</p> <p>Ressources constructor</p>"},{"location":"Zappy/GUI/Ressources/Ressources/#addegg","title":"addEgg","text":"<p>void addEgg(std::shared_ptr&lt;Eggs&gt; egg)</p> <p>Register an egg</p> Parameter <code>egg</code> The egg to register"},{"location":"Zappy/GUI/Ressources/Ressources/#addplayer","title":"addPlayer","text":"<p>void addPlayer(std::shared_ptr&lt;Players&gt; player)</p> <p>Register a player</p> Parameter <code>player</code> The player to register"},{"location":"Zappy/GUI/Ressources/Ressources/#geteggfromid","title":"getEggFromId","text":"<p>std::shared_ptr&lt;Eggs&gt; getEggFromId(int id) const</p> <p>Get an egg from his id</p> Parameter <code>id</code> The id of the egg Return <code>std::shared_ptr&lt;Eggs&gt;</code> The egg. <code>nullptr</code> if the egg doesn't exist"},{"location":"Zappy/GUI/Ressources/Ressources/#getmapdimensions","title":"getMapDimensions","text":"<p>std::pair&lt;int, int&gt; getMapDimensions() const</p> <p>Get the dimensions of the map</p> Return <code>std::pair&lt;int, int&gt;</code> The dimensions of the map"},{"location":"Zappy/GUI/Ressources/Ressources/#getplayerfromid","title":"getPlayerFromId","text":"<p>std::shared_ptr&lt;Players&gt; getPlayerFromId(int id) const</p> <p>Get a player from his id</p> Parameter <code>id</code> The id of the player Return <code>std::shared_ptr&lt;Players&gt;</code> The player. <code>nullptr</code> if the player doesn't exist"},{"location":"Zappy/GUI/Ressources/Ressources/#gettilefrompos","title":"getTileFromPos","text":"<p>std::shared_ptr&lt;Zappy::GUI::Ressources::TileRessources&gt; getTileFromPos(int posX, int posY) const</p> <p>Get a tile from his position</p> Parameter <code>posX</code> The x position of the tile Parameter <code>posY</code> The y position of the tile Return <code>std::shared_ptr&lt;TileRessources&gt;</code> The tile. <code>nullptr</code> if the tile doesn't exist"},{"location":"Zappy/GUI/Ressources/Ressources/#seteggonmap","title":"setEggOnMap","text":"<p>void setEggOnMap()</p> <p>Set all the registered egg on the map based on their position</p>"},{"location":"Zappy/GUI/Ressources/Ressources/#setplayeronmap","title":"setPlayerOnMap","text":"<p>void setPlayerOnMap()</p> <p>Set all the registered player on the map based on their position</p>"},{"location":"Zappy/GUI/Ressources/TileRessources/","title":"TileRessources","text":"<p>class TileRessources</p> <p>TileRessources class</p>"},{"location":"Zappy/GUI/Ressources/TileRessources/#functions","title":"Functions","text":"Name Description TileRessources TileRessources constructor getX Get the X position of the tile getY Get the Y position of the tile getFood Get the food on the tile setFood Set the food on the tile hasFood Check if the tile has food getLinemate Get the linemate on the tile setLinemate Set the linemate on the tile hasLinemate Check if the tile has linemate getDeraumere Get the deraumere on the tile setDeraumere Set the deraumere on the tile hasDeraumere Check if the tile has deraumere getSibur Get the sibur on the tile setSibur Set the sibur on the tile hasSibur Check if the tile has sibur getMendiane Get the mendiane on the tile setMendiane Set the mendiane on the tile hasMendiane Check if the tile has mendiane getPhiras Get the phiras on the tile setPhiras Set the phiras on the tile hasPhiras Check if the tile has phiras getThystame Get the thystame on the tile setThystame Set the thystame on the tile hasThystame Check if the tile has thystame getPlayers Get the players on the tile clearPlayers Clear the players on the tile addPlayer Register a player hasPlayers Check if the tile has players getEggs Get the eggs on the tile clearEggs Clear the eggs on the tile addEgg Register an egg hasEggs Check if the tile has eggs"},{"location":"Zappy/GUI/Ressources/TileRessources/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Ressources/TileRessources/#tileressources_1","title":"TileRessources","text":"<p>TileRessources(int x, int y)</p> <p>TileRessources constructor</p> Parameter <code>x</code> The x position of the tile Parameter <code>y</code> The y position of the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#addegg","title":"addEgg","text":"<p>void addEgg(std::shared_ptr&lt;Eggs&gt; egg)</p> <p>Register an egg</p> Parameter <code>egg</code> The egg to register"},{"location":"Zappy/GUI/Ressources/TileRessources/#addplayer","title":"addPlayer","text":"<p>void addPlayer(std::shared_ptr&lt;Players&gt; player)</p> <p>Register a player</p> Parameter <code>player</code> The player to register"},{"location":"Zappy/GUI/Ressources/TileRessources/#cleareggs","title":"clearEggs","text":"<p>void clearEggs()</p> <p>Clear the eggs on the tile</p>"},{"location":"Zappy/GUI/Ressources/TileRessources/#clearplayers","title":"clearPlayers","text":"<p>void clearPlayers()</p> <p>Clear the players on the tile</p>"},{"location":"Zappy/GUI/Ressources/TileRessources/#getderaumere","title":"getDeraumere","text":"<p>int getDeraumere() const</p> <p>Get the deraumere on the tile</p> Return <code>int</code> The deraumere on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#geteggs","title":"getEggs","text":"<p>std::vector&lt;std::shared_ptr&lt;Eggs&gt;&gt; getEggs() const</p> <p>Get the eggs on the tile</p> Return <code>std::vector&lt;std::shared_ptr&lt;Eggs&gt;&gt;</code> The eggs on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#getfood","title":"getFood","text":"<p>int getFood() const</p> <p>Get the food on the tile</p> Return <code>int</code> The food on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#getlinemate","title":"getLinemate","text":"<p>int getLinemate() const</p> <p>Get the linemate on the tile</p> Return <code>int</code> The linemate on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#getmendiane","title":"getMendiane","text":"<p>int getMendiane() const</p> <p>Get the mendiane on the tile</p> Return <code>int</code> The mendiane on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#getphiras","title":"getPhiras","text":"<p>int getPhiras() const</p> <p>Get the phiras on the tile</p> Return <code>int</code> The phiras on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#getplayers","title":"getPlayers","text":"<p>std::vector&lt;std::shared_ptr&lt;Players&gt;&gt; getPlayers() const</p> <p>Get the players on the tile</p> Return <code>std::vector&lt;std::shared_ptr&lt;Players&gt;&gt;</code> The players on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#getsibur","title":"getSibur","text":"<p>int getSibur() const</p> <p>Get the sibur on the tile</p> Return <code>int</code> The sibur on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#getthystame","title":"getThystame","text":"<p>int getThystame() const</p> <p>Get the thystame on the tile</p> Return <code>int</code> The thystame on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#getx","title":"getX","text":"<p>int getX() const</p> <p>Get the X position of the tile</p> Return <code>int</code> The X position of the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#gety","title":"getY","text":"<p>int getY() const</p> <p>Get the Y position of the tile</p> Return <code>int</code> The Y position of the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#hasderaumere","title":"hasDeraumere","text":"<p>bool hasDeraumere() const</p> <p>Check if the tile has deraumere</p> Return <code>bool</code> True if the tile has deraumere, false otherwise"},{"location":"Zappy/GUI/Ressources/TileRessources/#haseggs","title":"hasEggs","text":"<p>bool hasEggs() const</p> <p>Check if the tile has eggs</p> Return <code>bool</code> True if the tile has eggs, false otherwise"},{"location":"Zappy/GUI/Ressources/TileRessources/#hasfood","title":"hasFood","text":"<p>bool hasFood() const</p> <p>Check if the tile has food</p> Return <code>bool</code> True if the tile has food, false otherwise"},{"location":"Zappy/GUI/Ressources/TileRessources/#haslinemate","title":"hasLinemate","text":"<p>bool hasLinemate() const</p> <p>Check if the tile has linemate</p> Return <code>bool</code> True if the tile has linemate, false otherwise"},{"location":"Zappy/GUI/Ressources/TileRessources/#hasmendiane","title":"hasMendiane","text":"<p>bool hasMendiane() const</p> <p>Check if the tile has mendiane</p> Return <code>bool</code> True if the tile has mendiane, false otherwise"},{"location":"Zappy/GUI/Ressources/TileRessources/#hasphiras","title":"hasPhiras","text":"<p>bool hasPhiras() const</p> <p>Check if the tile has phiras</p> Return <code>bool</code> True if the tile has phiras, false otherwise"},{"location":"Zappy/GUI/Ressources/TileRessources/#hasplayers","title":"hasPlayers","text":"<p>bool hasPlayers() const</p> <p>Check if the tile has players</p> Return <code>bool</code> True if the tile has players, false otherwise"},{"location":"Zappy/GUI/Ressources/TileRessources/#hassibur","title":"hasSibur","text":"<p>bool hasSibur() const</p> <p>Check if the tile has sibur</p> Return <code>bool</code> True if the tile has sibur, false otherwise"},{"location":"Zappy/GUI/Ressources/TileRessources/#hasthystame","title":"hasThystame","text":"<p>bool hasThystame() const</p> <p>Check if the tile has thystame</p> Return <code>bool</code> True if the tile has thystame, false otherwise"},{"location":"Zappy/GUI/Ressources/TileRessources/#setderaumere","title":"setDeraumere","text":"<p>void setDeraumere(int deraumere)</p> <p>Set the deraumere on the tile</p> Parameter <code>deraumere</code> The deraumere on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#setfood","title":"setFood","text":"<p>void setFood(int food)</p> <p>Set the food on the tile</p> Parameter <code>food</code> The food on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#setlinemate","title":"setLinemate","text":"<p>void setLinemate(int linemate)</p> <p>Set the linemate on the tile</p> Parameter <code>linemate</code> The linemate on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#setmendiane","title":"setMendiane","text":"<p>void setMendiane(int mendiane)</p> <p>Set the mendiane on the tile</p> Parameter <code>mendiane</code> The mendiane on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#setphiras","title":"setPhiras","text":"<p>void setPhiras(int phiras)</p> <p>Set the phiras on the tile</p> Parameter <code>phiras</code> The phiras on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#setsibur","title":"setSibur","text":"<p>void setSibur(int sibur)</p> <p>Set the sibur on the tile</p> Parameter <code>sibur</code> The sibur on the tile"},{"location":"Zappy/GUI/Ressources/TileRessources/#setthystame","title":"setThystame","text":"<p>void setThystame(int thystame)</p> <p>Set the thystame on the tile</p> Parameter <code>thystame</code> The thystame on the tile"},{"location":"Zappy/GUI/Scene/","title":"Scene","text":""},{"location":"Zappy/GUI/Scene/#types","title":"Types","text":"Name Description Credit Credit class CreditScene CreditScene class Game Game class HelperScene HelperScene class Menu Menu class Option Option class ResolutionOption ResolutionOption class SoundOption SoundOption class"},{"location":"Zappy/GUI/Scene/Credit/","title":"Credit","text":"<p>class Credit : public AScene</p> <p>Credit class</p>"},{"location":"Zappy/GUI/Scene/Credit/#functions","title":"Functions","text":"Name Description Credit Credit constructor destroy Destroy the Credit object update Update the Credit object draw2D Draw the 2D objects of the Credit object resize Resize the Credit object nextScene Get the next scene"},{"location":"Zappy/GUI/Scene/Credit/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Scene/Credit/#credit_1","title":"Credit","text":"<p>Credit(std::shared_ptr&lt;Zappy::GUI::Raylib::Render&gt; render)</p> <p>Credit constructor</p> Parameter <code>render</code> The render"},{"location":"Zappy/GUI/Scene/Credit/#destroy","title":"destroy","text":"<p>void destroy() override</p> <p>Destroy the Credit object</p> <p>Warning</p> <p>After the destruction of the Credit object, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/Scene/Credit/#draw2d","title":"draw2D","text":"<p>void draw2D() override</p> <p>Draw the 2D objects of the Credit object</p>"},{"location":"Zappy/GUI/Scene/Credit/#nextscene","title":"nextScene","text":"<p>std::string nextScene() override</p> <p>Get the next scene</p> Return <code>std::string</code> The next scene"},{"location":"Zappy/GUI/Scene/Credit/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the Credit object</p>"},{"location":"Zappy/GUI/Scene/Credit/#update","title":"update","text":"<p>void update() override</p> <p>Update the Credit object</p>"},{"location":"Zappy/GUI/Scene/CreditScene/","title":"CreditScene","text":"<p>class CreditScene : public AScene</p> <p>CreditScene class</p>"},{"location":"Zappy/GUI/Scene/CreditScene/#functions","title":"Functions","text":"Name Description CreditScene CreditScene constructor destroy Destroy the CreditScene object update Update the CreditScene object draw2D Draw the 2D objects of the CreditScene object resize Resize the CreditScene object nextScene Get the next scene"},{"location":"Zappy/GUI/Scene/CreditScene/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Scene/CreditScene/#creditscene_1","title":"CreditScene","text":"<p>CreditScene(std::shared_ptr&lt;Zappy::GUI::Raylib::Render&gt; render, std::string text, int sceneNbr)</p> <p>CreditScene constructor</p> Parameter <code>render</code> The render Parameter <code>text</code> The text Parameter <code>sceneNbr</code> The scene number"},{"location":"Zappy/GUI/Scene/CreditScene/#destroy","title":"destroy","text":"<p>void destroy() override</p> <p>Destroy the CreditScene object</p> <p>Warning</p> <p>After the destruction of the CreditScene object, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/Scene/CreditScene/#draw2d","title":"draw2D","text":"<p>void draw2D() override</p> <p>Draw the 2D objects of the CreditScene object</p>"},{"location":"Zappy/GUI/Scene/CreditScene/#nextscene","title":"nextScene","text":"<p>std::string nextScene() override</p> <p>Get the next scene</p> Return <code>std::string</code> The next scene"},{"location":"Zappy/GUI/Scene/CreditScene/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the CreditScene object</p>"},{"location":"Zappy/GUI/Scene/CreditScene/#update","title":"update","text":"<p>void update() override</p> <p>Update the CreditScene object</p>"},{"location":"Zappy/GUI/Scene/Game/","title":"Game","text":"<p>class Game : public AScene</p> <p>Game class</p>"},{"location":"Zappy/GUI/Scene/Game/#functions","title":"Functions","text":"Name Description Game Game constructor start Start the Game Scene destroy Destroy the Game Scene update Update the Game Scene draw3D Draw the 3D objects of the Game Scene draw2D Draw the 2D objects of the Game Scene isReady Check if the Game Scene is ready nextScene Get the next scene resize Resize the Game Scene createMap Create the map"},{"location":"Zappy/GUI/Scene/Game/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Scene/Game/#game_1","title":"Game","text":"<p>Game(std::shared_ptr&lt;Zappy::GUI::Raylib::Render&gt; render)</p> <p>Game constructor</p> Parameter <code>render</code> The render"},{"location":"Zappy/GUI/Scene/Game/#createmap","title":"createMap","text":"<p>void createMap(std::pair&lt;int, int&gt; size)</p> <p>Create the map</p> Parameter <code>size</code> The size of the map"},{"location":"Zappy/GUI/Scene/Game/#destroy","title":"destroy","text":"<p>void destroy() override</p> <p>Destroy the Game Scene</p> <p>Warning</p> <p>After the destruction of the Game Scene, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/Scene/Game/#draw2d","title":"draw2D","text":"<p>void draw2D() override</p> <p>Draw the 2D objects of the Game Scene</p>"},{"location":"Zappy/GUI/Scene/Game/#draw3d","title":"draw3D","text":"<p>void draw3D() override</p> <p>Draw the 3D objects of the Game Scene</p>"},{"location":"Zappy/GUI/Scene/Game/#isready","title":"isReady","text":"<p>bool isReady() override</p> <p>Check if the Game Scene is ready</p> Return <code>bool</code> If the Game Scene is ready"},{"location":"Zappy/GUI/Scene/Game/#nextscene","title":"nextScene","text":"<p>std::string nextScene() override</p> <p>Get the next scene</p> Return <code>std::string</code> The next scene"},{"location":"Zappy/GUI/Scene/Game/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the Game Scene</p>"},{"location":"Zappy/GUI/Scene/Game/#start","title":"start","text":"<p>void start() override</p> <p>Start the Game Scene</p>"},{"location":"Zappy/GUI/Scene/Game/#update","title":"update","text":"<p>void update() override</p> <p>Update the Game Scene</p>"},{"location":"Zappy/GUI/Scene/HelperScene/","title":"HelperScene","text":"<p>class HelperScene : public AScene</p> <p>HelperScene class</p>"},{"location":"Zappy/GUI/Scene/HelperScene/#functions","title":"Functions","text":"Name Description HelperScene HelperScene constructor destroy Destroy the HelperScene object update Update the HelperScene object draw2D Draw the 2D objects of the HelperScene object resize Resize the HelperScene object nextScene Get the next scene"},{"location":"Zappy/GUI/Scene/HelperScene/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Scene/HelperScene/#helperscene_1","title":"HelperScene","text":"<p>HelperScene(std::shared_ptr&lt;Zappy::GUI::Raylib::Render&gt; render, std::string text)</p> <p>HelperScene constructor</p> Parameter <code>render</code> The render Parameter <code>text</code> The text"},{"location":"Zappy/GUI/Scene/HelperScene/#destroy","title":"destroy","text":"<p>void destroy() override</p> <p>Destroy the HelperScene object</p> <p>Warning</p> <p>After the destruction of the HelperScene object, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/Scene/HelperScene/#draw2d","title":"draw2D","text":"<p>void draw2D() override</p> <p>Draw the 2D objects of the HelperScene object</p>"},{"location":"Zappy/GUI/Scene/HelperScene/#nextscene","title":"nextScene","text":"<p>std::string nextScene() override</p> <p>Get the next scene</p> Return <code>std::string</code> The next scene"},{"location":"Zappy/GUI/Scene/HelperScene/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the HelperScene object</p>"},{"location":"Zappy/GUI/Scene/HelperScene/#update","title":"update","text":"<p>void update() override</p> <p>Update the HelperScene object</p>"},{"location":"Zappy/GUI/Scene/Menu/","title":"Menu","text":"<p>class Menu : public AScene</p> <p>Menu class</p>"},{"location":"Zappy/GUI/Scene/Menu/#functions","title":"Functions","text":"Name Description Menu Menu constructor start Start the Menu Scene destroy Destroy the Menu Scene draw3D Update the Menu Scene draw2D Draw the 2D objects of the Menu Scene resize Resize the Menu Scene nextScene Get the next scene update Update the Menu Scene"},{"location":"Zappy/GUI/Scene/Menu/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Scene/Menu/#menu_1","title":"Menu","text":"<p>Menu(std::shared_ptr&lt;Zappy::GUI::Raylib::Render&gt; render)</p> <p>Menu constructor</p> Parameter <code>render</code> The render"},{"location":"Zappy/GUI/Scene/Menu/#destroy","title":"destroy","text":"<p>void destroy() override</p> <p>Destroy the Menu Scene</p> <p>Warning</p> <p>After the destruction of the Menu Scene, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/Scene/Menu/#draw2d","title":"draw2D","text":"<p>void draw2D() override</p> <p>Draw the 2D objects of the Menu Scene</p>"},{"location":"Zappy/GUI/Scene/Menu/#draw3d","title":"draw3D","text":"<p>void draw3D() override</p> <p>Update the Menu Scene</p>"},{"location":"Zappy/GUI/Scene/Menu/#nextscene","title":"nextScene","text":"<p>std::string nextScene() override</p> <p>Get the next scene</p> Return <code>std::string</code> The next scene"},{"location":"Zappy/GUI/Scene/Menu/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the Menu Scene</p>"},{"location":"Zappy/GUI/Scene/Menu/#start","title":"start","text":"<p>void start() override</p> <p>Start the Menu Scene</p>"},{"location":"Zappy/GUI/Scene/Menu/#update","title":"update","text":"<p>void update(bool isGameReady)</p> <p>Update the Menu Scene</p>"},{"location":"Zappy/GUI/Scene/Option/","title":"Option","text":"<p>class Option : public AScene</p> <p>Option class</p>"},{"location":"Zappy/GUI/Scene/Option/#functions","title":"Functions","text":"Name Description Option Option constructor start Start the Option Scene destroy Destroy the Option Scene update Update the Option Scene draw2D Draw the 2D objects of the Option Scene resize Resize the Option Scene nextScene Get the next scene"},{"location":"Zappy/GUI/Scene/Option/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Scene/Option/#option_1","title":"Option","text":"<p>Option(std::shared_ptr&lt;Zappy::GUI::Raylib::Render&gt; render)</p> <p>Option constructor</p> Parameter <code>render</code> The render"},{"location":"Zappy/GUI/Scene/Option/#destroy","title":"destroy","text":"<p>void destroy() override</p> <p>Destroy the Option Scene</p> <p>Warning</p> <p>After the destruction of the Option Scene, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/Scene/Option/#draw2d","title":"draw2D","text":"<p>void draw2D() override</p> <p>Draw the 2D objects of the Option Scene</p>"},{"location":"Zappy/GUI/Scene/Option/#nextscene","title":"nextScene","text":"<p>std::string nextScene() override</p> <p>Get the next scene</p> Return <code>std::string</code> The next scene"},{"location":"Zappy/GUI/Scene/Option/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the Option Scene</p>"},{"location":"Zappy/GUI/Scene/Option/#start","title":"start","text":"<p>void start() override</p> <p>Start the Option Scene</p>"},{"location":"Zappy/GUI/Scene/Option/#update","title":"update","text":"<p>void update() override</p> <p>Update the Option Scene</p>"},{"location":"Zappy/GUI/Scene/ResolutionOption/","title":"ResolutionOption","text":"<p>class ResolutionOption : public AScene</p> <p>ResolutionOption class</p>"},{"location":"Zappy/GUI/Scene/ResolutionOption/#functions","title":"Functions","text":"Name Description ResolutionOption ResolutionOption constructor destroy Destroy the ResolutionOption object update Update the ResolutionOption object draw2D Draw the 2D objects of the ResolutionOption object resize Resize the ResolutionOption object nextScene Get the next scene"},{"location":"Zappy/GUI/Scene/ResolutionOption/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Scene/ResolutionOption/#resolutionoption_1","title":"ResolutionOption","text":"<p>ResolutionOption(std::shared_ptr&lt;Zappy::GUI::Raylib::Render&gt; render)</p> <p>ResolutionOption constructor</p> Parameter <code>render</code> The render"},{"location":"Zappy/GUI/Scene/ResolutionOption/#destroy","title":"destroy","text":"<p>void destroy() override</p> <p>Destroy the ResolutionOption object</p> <p>Warning</p> <p>After the destruction of the ResolutionOption object, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/Scene/ResolutionOption/#draw2d","title":"draw2D","text":"<p>void draw2D() override</p> <p>Draw the 2D objects of the ResolutionOption object</p>"},{"location":"Zappy/GUI/Scene/ResolutionOption/#nextscene","title":"nextScene","text":"<p>std::string nextScene() override</p> <p>Get the next scene</p> Return <code>std::string</code> The next scene"},{"location":"Zappy/GUI/Scene/ResolutionOption/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the ResolutionOption object</p>"},{"location":"Zappy/GUI/Scene/ResolutionOption/#update","title":"update","text":"<p>void update() override</p> <p>Update the ResolutionOption object</p>"},{"location":"Zappy/GUI/Scene/SoundOption/","title":"SoundOption","text":"<p>class SoundOption : public AScene</p> <p>SoundOption class</p>"},{"location":"Zappy/GUI/Scene/SoundOption/#functions","title":"Functions","text":"Name Description SoundOption SoundOption constructor destroy Destroy the SoundOption object update Update the SoundOption object draw2D Draw the 2D objects of the SoundOption object resize Resize the SoundOption object nextScene Get the next scene"},{"location":"Zappy/GUI/Scene/SoundOption/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Scene/SoundOption/#soundoption_1","title":"SoundOption","text":"<p>SoundOption(std::shared_ptr&lt;Zappy::GUI::Raylib::Render&gt; render)</p> <p>SoundOption constructor</p> Parameter <code>render</code> The render"},{"location":"Zappy/GUI/Scene/SoundOption/#destroy","title":"destroy","text":"<p>void destroy() override</p> <p>Destroy the SoundOption object</p> <p>Warning</p> <p>After the destruction of the SoundOption object, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/Scene/SoundOption/#draw2d","title":"draw2D","text":"<p>void draw2D() override</p> <p>Draw the 2D objects of the SoundOption object</p>"},{"location":"Zappy/GUI/Scene/SoundOption/#nextscene","title":"nextScene","text":"<p>std::string nextScene() override</p> <p>Get the next scene</p> Return <code>std::string</code> The next scene"},{"location":"Zappy/GUI/Scene/SoundOption/#resize","title":"resize","text":"<p>void resize() override</p> <p>Resize the SoundOption object</p>"},{"location":"Zappy/GUI/Scene/SoundOption/#update","title":"update","text":"<p>void update() override</p> <p>Update the SoundOption object</p>"},{"location":"Zappy/GUI/SceneManager/","title":"SceneManager","text":"<p>class SceneManager</p> <p>SceneManager class</p>"},{"location":"Zappy/GUI/SceneManager/#functions","title":"Functions","text":"Name Description SceneManager Construct a new SceneManager object destroy Destroy the SceneManager object run Game loop _resize Used to call the resize method of each scenes"},{"location":"Zappy/GUI/SceneManager/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/SceneManager/#scenemanager_1","title":"SceneManager","text":"<p>SceneManager()</p> <p>Construct a new SceneManager object</p>"},{"location":"Zappy/GUI/SceneManager/#_resize","title":"_resize","text":"<p>void _resize()</p> <p>Used to call the resize method of each scenes</p>"},{"location":"Zappy/GUI/SceneManager/#destroy","title":"destroy","text":"<p>void destroy()</p> <p>Destroy the SceneManager object</p> <p>Warning</p> <p>After the destruction of the SceneManager, you won't be able to use it anymore</p>"},{"location":"Zappy/GUI/SceneManager/#run","title":"run","text":"<p>void run()</p> <p>Game loop</p>"},{"location":"Zappy/GUI/Sfml/","title":"Sfml","text":""},{"location":"Zappy/GUI/Sfml/#types","title":"Types","text":"Name Description SoundManager A class to manage sounds"},{"location":"Zappy/GUI/Sfml/SoundManager/","title":"SoundManager","text":"<p>class SoundManager</p> <p>A class to manage sounds</p>"},{"location":"Zappy/GUI/Sfml/SoundManager/#functions","title":"Functions","text":"Name Description getInstance Get the instance of the SoundManager setMusique Set the music of the SoundManager setEffetSonore Set the sound effect of the SoundManager setVolumeEffetSonore Set the volume of the sound effect setVolumeGeneralMusique Set the volume of the music playButtonClickSound Play the sound of the clicked button playgeneralSound Play the general sound effect"},{"location":"Zappy/GUI/Sfml/SoundManager/#function-details","title":"Function Details","text":""},{"location":"Zappy/GUI/Sfml/SoundManager/#getinstance","title":"getInstance","text":"<p>static SoundManager&amp; getInstance()</p> <p>Get the instance of the SoundManager</p> Return <code>SoundManager&amp;</code> The instance of the SoundManager"},{"location":"Zappy/GUI/Sfml/SoundManager/#playbuttonclicksound","title":"playButtonClickSound","text":"<p>void playButtonClickSound()</p> <p>Play the sound of the clicked button</p>"},{"location":"Zappy/GUI/Sfml/SoundManager/#playgeneralsound","title":"playgeneralSound","text":"<p>void playgeneralSound()</p> <p>Play the general sound effect</p>"},{"location":"Zappy/GUI/Sfml/SoundManager/#seteffetsonore","title":"setEffetSonore","text":"<p>void setEffetSonore(const std::string&amp; effetSonorePath)</p> <p>Set the sound effect of the SoundManager</p> Parameter <code>effetSonorePath</code> The path to the sound effect file"},{"location":"Zappy/GUI/Sfml/SoundManager/#setmusique","title":"setMusique","text":"<p>void setMusique(const std::string&amp; musiquePath)</p> <p>Set the music of the SoundManager</p> Parameter <code>musiquePath</code> The path to the music file"},{"location":"Zappy/GUI/Sfml/SoundManager/#setvolumeeffetsonore","title":"setVolumeEffetSonore","text":"<p>void setVolumeEffetSonore(float newVolume)</p> <p>Set the volume of the sound effect</p> Parameter <code>newVolume</code> The new volume"},{"location":"Zappy/GUI/Sfml/SoundManager/#setvolumegeneralmusique","title":"setVolumeGeneralMusique","text":"<p>void setVolumeGeneralMusique(float newVolume)</p> <p>Set the volume of the music</p> Parameter <code>newVolume</code> The new volume"},{"location":"Zappy/Mutex/","title":"Mutex","text":"<p>class Mutex</p> <p>A simple mutex class</p>"},{"location":"Zappy/Mutex/#functions","title":"Functions","text":"Name Description lock Lock the mutex unlock Unlock the mutex tryLock Try to lock the mutex."},{"location":"Zappy/Mutex/#function-details","title":"Function Details","text":""},{"location":"Zappy/Mutex/#lock","title":"lock","text":"<p>void lock()</p> <p>Lock the mutex</p>"},{"location":"Zappy/Mutex/#trylock","title":"tryLock","text":"<p>bool tryLock()</p> <p>Try to lock the mutex.</p> Return <code>true</code> if the mutex was successfully locked, <code>false</code> if it was already locked"},{"location":"Zappy/Mutex/#unlock","title":"unlock","text":"<p>void unlock()</p> <p>Unlock the mutex</p>"},{"location":"Zappy/server/","title":"Server","text":"<p>Server side of the Zappy project</p> libdlist Linked list library libinput_output Library adding logging and input manager AI Handling Handling of AI interactions GUI Handling Handling of GUI interactions"},{"location":"Zappy/server/#functions","title":"Functions","text":"Name Description accept_new_connection Accept a new connection on the server *  and add it to the clients list delete_client Completly remove a client of the server. destroy_server Destroy the server get_server Singleton function to get the server init Initiate all pre-run things. init_connection Initialize the server init_game Initialize the game init_timeval Init the time_val with the parsing value move_client Move the client from it's tile to the x y tile. ressource_from_index Convert item into it's name round_world Make x and y valid coordinates run run the server str_append Append data to origin, by re allocating"},{"location":"Zappy/server/#function-details","title":"Function Details","text":""},{"location":"Zappy/server/#accept_new_connection","title":"accept_new_connection","text":"<p>void accept_new_connection(server_t *server)</p> <p>Accept a new connection on the server  *  and add it to the clients list</p> Parameter <code>server</code> The server to accept the connection on"},{"location":"Zappy/server/#delete_client","title":"delete_client","text":"<p>void delete_client(client_t *client)</p> <p>Completly remove a client of the server.</p> Parameter <code>client</code> Pointer to the client to remove <p>Note</p> <p>This function will also remove the client from the tile it was on</p>"},{"location":"Zappy/server/#destroy_server","title":"destroy_server","text":"<p>void destroy_server(void)</p> <p>Destroy the server</p>"},{"location":"Zappy/server/#get_server","title":"get_server","text":"<p>server_t *get_server(void)</p> <p>Singleton function to get the server</p> Return The server"},{"location":"Zappy/server/#init","title":"init","text":"<p>char init(void)</p> <p>Initiate all pre-run things.</p> Return 0, just to be able to call at the beggining of main"},{"location":"Zappy/server/#init_connection","title":"init_connection","text":"<p>connect_t *init_connection(parsing_t *p)</p> <p>Initialize the server</p> Parameter <code>p</code> The parsing structure with all the informations Return The server connection informations"},{"location":"Zappy/server/#init_game","title":"init_game","text":"<p>game_t *init_game(parsing_t *p)</p> <p>Initialize the game</p> Parameter <code>p</code> The parsing structure with all the informations Return The game structure"},{"location":"Zappy/server/#init_timeval","title":"init_timeval","text":"<p>void init_timeval(server_t *server, parsing_t *p)</p> <p>Init the time_val with the parsing value</p> Parameter <code>server</code> Server to modify Parameter <code>p</code> Parsing structure"},{"location":"Zappy/server/#move_client","title":"move_client","text":"<p>void move_client(client_t *client, int x, int y)</p> <p>Move the client from it's tile to the x y tile.</p> Parameter <code>client</code> Client to move Parameter <code>x</code> X of the new tile Parameter <code>y</code> Y of the new tile"},{"location":"Zappy/server/#ressource_from_index","title":"ressource_from_index","text":"<p>void ressource_from_index(items_t index, char *out)</p> <p>Convert item into it's name</p> Parameter <code>index</code> The ressource to be changed Parameter <code>out</code> Starting position where to write the name. need to be 10 long"},{"location":"Zappy/server/#round_world","title":"round_world","text":"<p>void round_world(int *x, int *y)</p> <p>Make x and y valid coordinates</p>"},{"location":"Zappy/server/#run","title":"run","text":"<p>void run(server_t *server)</p> <p>run the server</p> Parameter <code>server</code> The server to run"},{"location":"Zappy/server/#str_append","title":"str_append","text":"<p>void str_append(char **origin, const char *data)</p> <p>Append data to origin, by re allocating</p> Parameter <code>origin</code> Adress of the origin data, might get changed by realloc Parameter <code>data</code> Data to be written, can be NULL, and will NOT be changed <p>Warning</p> <p>Please take care when using this function, it should not be harmfull, but read how it works first</p>"},{"location":"Zappy/server/ai/","title":"AI Handling","text":"<p>Handling of AI interactions</p>"},{"location":"Zappy/server/dlist/","title":"libdlist","text":"<p>Linked list library</p>"},{"location":"Zappy/server/dlist/#functions","title":"Functions","text":"Name Description cmp Erases an element from the linked list. cmp Extracts an element from the linked list. cmp Finds the data of an element in the linked list. cmp Finds an element in the linked list. cmp Inserts a new element in the linked list. dl_empty Checks if the linked list is empty. dl_length Returns the length of the linked list. dl_pop_back Removes the last element of the linked list and returns its data. dl_pop_front Removes the first element of the linked list and returns its data. dl_push_back Adds a new element at the end of the linked list. dl_push_front Adds a new element at the beginning of the linked list. free_func Clears the linked list and send the data of each element to the * given function. func Iterates through the linked list and applies the given function to * the data of each element. Do nothing if the list is empty or if the given * function is NULL. func Iterates through the linked list and applies the given function to * the data of each element. Do nothing if the list is empty or if the given * function is NULL. func Iterates through the linked list and applies the given function to * the node. Do nothing if the list is empty or if the given function is NULL. func Iterates through the linked list and applies the given function to * the node. Do nothing if the list is empty or if the given function is NULL."},{"location":"Zappy/server/dlist/#function-details","title":"Function Details","text":""},{"location":"Zappy/server/dlist/#cmp","title":"cmp","text":"<p>bool cmp(void *, void *)</p> <p>Erases an element from the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>ref</code> A comparative value to find the element to erase. Parameter <code>cmp</code> A function that takes two void pointers as arguments and returns a boolean. The first argument is the given ref and the second is the data of the current element. Parameter <code>del</code> A function that takes a void pointer as an argument and returns void. Or NULL if no function is needed. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> <p>bool cmp(void *, void *)</p> <p>Extracts an element from the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>ref</code> A comparative value to find the element to extract. Parameter <code>cmp</code> A function that takes two void pointers as arguments and returns a boolean. The first argument is the given ref and the second is the data of the current element. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> Return Return the data of the extracted element. NULL if the element was not found or in case of error <p>bool cmp(void *, void *)</p> <p>Finds the data of an element in the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>ref</code> A comparative value to find the element. Parameter <code>cmp</code> A function that takes two void pointers as arguments and returns a boolean. The first argument is the given ref and the second is the data of the current element. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> Return Return the data of the found element. NULL if the element was not found or in case of error. <p>bool cmp(void *, void *)</p> <p>Finds an element in the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>ref</code> A comparative value to find the element. Parameter <code>cmp</code> A function that takes two void pointers as arguments and returns a boolean. The first argument is the given ref and the second is the data of the current element. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> Return Return founded element. NULL if the element was not found or in case of error. <p>bool cmp(void *, void *)</p> <p>Inserts a new element in the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>data</code> The data to be added to the list. Parameter <code>cmp</code> A function that takes two void pointers as arguments and returns a boolean. The first argument is the given data and the second is the data of the current element. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p>"},{"location":"Zappy/server/dlist/#dl_empty","title":"dl_empty","text":"<p>bool dl_empty(lnode_t *head)</p> <p>Checks if the linked list is empty.</p> Parameter <code>head</code> A pointer to the head of the linked list. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> Return Return true if the list is empty, false otherwise."},{"location":"Zappy/server/dlist/#dl_length","title":"dl_length","text":"<p>int dl_length(lnode_t *head)</p> <p>Returns the length of the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> Return Return the length of the list. 0 if the list is empty or in case of error."},{"location":"Zappy/server/dlist/#dl_pop_back","title":"dl_pop_back","text":"<p>void *dl_pop_back(lnode_t **head)</p> <p>Removes the last element of the linked list and returns its data.</p> Parameter <code>head</code> A pointer to the head of the linked list. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> Return Return the data of the first element of the list. NULL if the list is empty or in case of error."},{"location":"Zappy/server/dlist/#dl_pop_front","title":"dl_pop_front","text":"<p>void *dl_pop_front(lnode_t **head)</p> <p>Removes the first element of the linked list and returns its data.</p> Parameter <code>head</code> A pointer to the head of the linked list. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> Return Return the data of the first element of the list. NULL if the list is empty or in case of error."},{"location":"Zappy/server/dlist/#dl_push_back","title":"dl_push_back","text":"<p>void dl_push_back(lnode_t **head, void *data)</p> <p>Adds a new element at the end of the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>value</code> The value to be added to the list. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p>"},{"location":"Zappy/server/dlist/#dl_push_front","title":"dl_push_front","text":"<p>void dl_push_front(lnode_t **head, void *data)</p> <p>Adds a new element at the beginning of the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>value</code> The value to be added to the list. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p>"},{"location":"Zappy/server/dlist/#free_func","title":"free_func","text":"<p>void free_func(void *)</p> <p>Clears the linked list and send the data of each element to the  * given function.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>free_func</code> A function that takes a void pointer as an argument and returns void. Or NULL if no function is needed. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p>"},{"location":"Zappy/server/dlist/#func","title":"func","text":"<p>void func(void *)</p> <p>Iterates through the linked list and applies the given function to  * the data of each element. Do nothing if the list is empty or if the given  * function is NULL.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>func</code> A function that takes a void pointer as an argument and returns void. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> <p>void func(void *, void *)</p> <p>Iterates through the linked list and applies the given function to  * the data of each element. Do nothing if the list is empty or if the given  * function is NULL.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>func</code> A function that takes two void pointers as arguments and returns void. Parameter <code>param</code> A pointer to a parameter that will be passed to the function. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> <p>void func(lnode_t *)</p> <p>Iterates through the linked list and applies the given function to  * the node. Do nothing if the list is empty or if the given function is NULL.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>func</code> A function that takes a lnode_t pointer as an argument and returns void. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> <p>void func(lnode_t *, void *)</p> <p>Iterates through the linked list and applies the given function to  * the node. Do nothing if the list is empty or if the given function is NULL.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>func</code> A function that takes two void pointers as arguments and returns void. Parameter <code>param</code> A pointer to a parameter that will be passed to the function. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p>"},{"location":"Zappy/server/gui/","title":"GUI Handling","text":"<p>Handling of GUI interactions</p>"},{"location":"Zappy/server/io/","title":"libinput_output","text":"<p>Library adding logging and input manager</p>"},{"location":"Zappy/server/io/#functions","title":"Functions","text":"Name Description display_buffer Display the buffer. gci Stack the 3 arguments in a struct. get_log_file Return the log file get_log_level Getter for the log level log_data Log data. Used with the LOG macro opcl_log_file Open / Close the log file run_log Display data (and log into file) set_log_level Setter for the log level toggle_log_on_stderr Set logging on stderr (true) or stdout (false, default)"},{"location":"Zappy/server/io/#function-details","title":"Function Details","text":""},{"location":"Zappy/server/io/#display_buffer","title":"display_buffer","text":"<p>void display_buffer(void)</p> <p>Display the buffer.</p> <p>Note</p> <p>This function is usefull when displaying other infos at the same time (like logs )</p>"},{"location":"Zappy/server/io/#gci","title":"gci","text":"<p>call_infos_t *gci(const char *file, size_t line, const char *func)</p> <p>Stack the 3 arguments in a struct.</p> <p>Warning</p> <p>Globally no reason tu manually use that function. Part of the LOG macro</p>"},{"location":"Zappy/server/io/#get_log_file","title":"get_log_file","text":"<p>FILE *get_log_file(void)</p> <p>Return the log file</p> Return The file ptr, or NULL"},{"location":"Zappy/server/io/#get_log_level","title":"get_log_level","text":"<p>log_level_t get_log_level(void)</p> <p>Getter for the log level</p> Return The current logging level <p></p> <p>The logging have 5 levels: - DEBUG - basicly any dev-axed infos - INFO - normal information for the user - WARNING - something went wrong, but it's not a big deal - ERROR - something went wrong and it's kinda important - CRITICAL - something went horribly wrong and will 100% break. These are represented by the following constants (variables of the enum log_level_t) : - LOG_LEVEL_DEBUG - LOG_LEVEL_INFO - LOG_LEVEL_WARNING - LOG_LEVEL_ERROR - LOG_LEVEL_CRITICAL</p>"},{"location":"Zappy/server/io/#log_data","title":"log_data","text":"<p>void log_data(call_infos_t *pos, log_level_t level, const char *message, ...) attribute((format(printf, 3, 4)))</p> <p>Log data. Used with the LOG macro</p> Parameter <code>pos</code> Position in code got using the gci function. Parameter <code>level</code> Logging level (see (log_level)[#log_level]) Parameter <code>message</code> printf like message <p>Danger</p> <p>DO NOT USE IT RAW !!! There is a LOG macro (taking a level and a message as parameter). You HAVE TO use the macro, and not the log_data function. Unfortunatly, no protections have been implemented, cause we can't.</p> <p>Please also note that this function is defined with the format attribute, so you should not be able to pass invalid printf syntax.</p>"},{"location":"Zappy/server/io/#opcl_log_file","title":"opcl_log_file","text":"<p>void opcl_log_file(const char *filename)</p> <p>Open / Close the log file</p> Parameter <code>filename</code> File to open, or NULL to just close the file"},{"location":"Zappy/server/io/#run_log","title":"run_log","text":"<p>void run_log(const char *out, bool display, bool log_on_stderr)</p> <p>Display data (and log into file)</p> Parameter <code>out</code> Data to be displayed. Parameter <code>display</code> If the data needs to be displayed on stdout Parameter <code>log_on_stderr</code> Define if stderr should be used, instead of stdout <p>This function will display data and log it to logfile (if open) It will display [hour:minute:sec day/mount/year] before data Prefer using the LOG macro, as it will handle logging level, format and more.</p>"},{"location":"Zappy/server/io/#set_log_level","title":"set_log_level","text":"<p>void set_log_level(log_level_t level)</p> <p>Setter for the log level</p> Parameter <code>level</code> New logging level, ranging from DEBUG to CRITICAL"},{"location":"Zappy/server/io/#toggle_log_on_stderr","title":"toggle_log_on_stderr","text":"<p>void toggle_log_on_stderr(bool value)</p> <p>Set logging on stderr (true) or stdout (false, default)</p> Parameter <code>value</code> true to log on STDERR, false to use STDOUT"}]}