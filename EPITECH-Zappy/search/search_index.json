{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Zappy","text":"<p>a tribute to Zaphod Beeblebrox</p> Zappy Main project group"},{"location":"#functions","title":"Functions","text":"Name Description parsing_check Final check for the parsing destroy_parsing Destroy the parsing structure. init_parsing Init an empty parsing structure parse Parse the arguments and return a parsing structure. is_parsing_ok Check if the argument passed in the program are ok is_digit Check is a char is a digit is_digits Check is a string is made of digit read_file Read a file get_file_content Get the content of a file sig_handler Signal handler"},{"location":"#function-details","title":"Function Details","text":""},{"location":"#destroy_parsing","title":"destroy_parsing","text":"<p>void destroy_parsing(parsing_t *parsing)</p> <p>Destroy the parsing structure.</p> Parameter <code>parsing</code> A pointer to the parsing structure."},{"location":"#get_file_content","title":"get_file_content","text":"<p>char *get_file_content(char *filepath)</p> <p>Get the content of a file</p> Parameter <code>filepath</code> the path to the file Return the content of the file as a string"},{"location":"#init_parsing","title":"init_parsing","text":"<p>parsing_t *init_parsing(void)</p> <p>Init an empty parsing structure</p> Return the new structure"},{"location":"#is_digit","title":"is_digit","text":"<p>bool is_digit(char c)</p> <p>Check is a char is a digit</p> Parameter <code>c</code> the character to check Return True if the character is a digit, false otherwise"},{"location":"#is_digits","title":"is_digits","text":"<p>bool is_digits(char *str)</p> <p>Check is a string is made of digit</p> Parameter <code>str</code> the string to check Return True if the string is made of digits, false otherwise"},{"location":"#is_parsing_ok","title":"is_parsing_ok","text":"<p>void is_parsing_ok(parsing_t *p)</p> <p>Check if the argument passed in the program are ok</p> Parameter <code>p</code> The structure parsing_t Return exiting if not ok"},{"location":"#parse","title":"parse","text":"<p>parsing_t *parse(int argc, char **argv)</p> <p>Parse the arguments and return a parsing structure.</p> Parameter <code>argc</code> The number of arguments. Parameter <code>argv</code> The arguments. Return A pointer to the parsing structure."},{"location":"#parsing_check","title":"parsing_check","text":"<p>parsing_t *parsing_check(parsing_t *p)</p> <p>Final check for the parsing</p> Parameter <code>p</code> the parsing structure"},{"location":"#read_file","title":"read_file","text":"<p>void read_file(char *filepath)</p> <p>Read a file</p> Parameter <code>filepath</code> the path to the file"},{"location":"#sig_handler","title":"sig_handler","text":"<p>void sig_handler(int)</p> <p>Signal handler</p> Parameter <code>int</code> the signal status"},{"location":"Zappy/","title":"Zappy","text":"<p>Main project group</p> Server Server side of the Zappy project"},{"location":"Zappy/server/","title":"Server","text":"<p>Server side of the Zappy project</p> libheap Library encapsulating Heap access libmlist Double linked list library libinput_output Library adding logging and input manager"},{"location":"Zappy/server/heap/","title":"libheap","text":"<p>Library encapsulating Heap access</p>"},{"location":"Zappy/server/heap/#functions","title":"Functions","text":"Name Description fcleanup Function used to clear out all allocated chunck of data ffree Like free, but only work with chunks allocated with fmalloc. ffree_deref Free pointed pointer. Used for FREE macro fget_trash Dev. Return the list element containing the ptr argument. fmalloc Like malloc, but save the allocated chunk in memory for garbage * cleanup once the program ends"},{"location":"Zappy/server/heap/#function-details","title":"Function Details","text":""},{"location":"Zappy/server/heap/#fcleanup","title":"fcleanup","text":"<p>void attribute((destructor)) fcleanup(void)</p> <p>Function used to clear out all allocated chunck of data</p> <p>Tip</p> <p>If you are not using GNU (like using gcc), this function will NOT be called when program exit. But, if you are, you don't need to do anything for this function to be executed just before your program exit (after main).</p>"},{"location":"Zappy/server/heap/#ffree","title":"ffree","text":"<p>void ffree(void *ptr)</p> <p>Like free, but only work with chunks allocated with fmalloc.</p> <p>Note</p> <p>This also take care of any error that could occure (double free, invalid free...). The cost is that the more you allocate, the longer ffree will take.</p>"},{"location":"Zappy/server/heap/#ffree_deref","title":"ffree_deref","text":"<p>void ffree_deref(void *data)</p> <p>Free pointed pointer. Used for FREE macro</p> <p>This function will attempt to dereference a pointer (\"*(void**)\") and free it.</p> <p>Danger</p> <p>In case of invalid pointer (for example, a pointer NOT pointing to another pointer), there will be an undefined behaviour.</p>"},{"location":"Zappy/server/heap/#fget_trash","title":"fget_trash","text":"<p>garbage_list_t fget_trash(void *ptr)</p> <p>Dev. Return the list element containing the ptr argument.</p> Parameter <code>ptr</code> Pointer to search in the trash can. <p>Note</p> <p>There are no real reason to manually use this function if you are not making \"extensions\" for the garbage collector.</p> Return \"garbage bag\" containing the pointer, or NULL if not found."},{"location":"Zappy/server/heap/#fmalloc","title":"fmalloc","text":"<p>void *fmalloc(size_t size)</p> <p>Like malloc, but save the allocated chunk in memory for garbage   * cleanup once the program ends</p> Parameter <code>size</code> Size to allocate <p>Note</p> <p>This function acts more like a calloc(), because it also set each newly allocated bytes to 0.</p> Return Newly allocated data, or NULL if allocation failed"},{"location":"Zappy/server/io/","title":"libinput_output","text":"<p>Library adding logging and input manager</p>"},{"location":"Zappy/server/io/#functions","title":"Functions","text":"Name Description call_infos Stack the 3 arguments in a struct. display_buffer Display the buffer. get_log_level Getter for the log level log_data Log data. Used with the LOG macro set_log_level Setter for the log level"},{"location":"Zappy/server/io/#function-details","title":"Function Details","text":""},{"location":"Zappy/server/io/#call_infos","title":"call_infos","text":"<p>call_infos_t *call_infos(const char *file, size_t line, const char *func)</p> <p>Stack the 3 arguments in a struct.</p> <p>Warning</p> <p>Globally no reason tu manually use that function. Part of the LOG macro</p>"},{"location":"Zappy/server/io/#display_buffer","title":"display_buffer","text":"<p>void display_buffer(void)</p> <p>Display the buffer.</p> <p>Note</p> <p>This function is usefull when displaying other infos at the same time (like logs )</p>"},{"location":"Zappy/server/io/#get_log_level","title":"get_log_level","text":"<p>log_level_t get_log_level(void)</p> <p>Getter for the log level</p> Return The current logging level <p>The logging have 5 levels: - DEBUG - basicly any dev-axed infos - INFO - normal information for the user - WARNING - something went wrong, but it's not a big deal - ERROR - something went wrong and it's kinda important - CRITICAL - something went horribly wrong and will 100% break. These are represented by the following constants (variables of the enum log_level_t) : - LOG_LEVEL_DEBUG - LOG_LEVEL_INFO - LOG_LEVEL_WARNING - LOG_LEVEL_ERROR - LOG_LEVEL_CRITICAL</p>"},{"location":"Zappy/server/io/#log_data","title":"log_data","text":"<p>void log_data(log_level_t level, const char *message, call_infos_t *infos)</p> <p>Log data. Used with the LOG macro</p> <p>Danger</p> <p>DO NOT USE IT RAW !!! There is a LOG macro (taking a level and a message as parameter). You HAVE TO use the macro, and not the log_data function. Unfortunatly, no protections have been implemented, cause we can't.</p>"},{"location":"Zappy/server/io/#set_log_level","title":"set_log_level","text":"<p>void set_log_level(log_level_t level)</p> <p>Setter for the log level</p> Parameter <code>level</code> New logging level, ranging from DEBUG to CRITICAL"},{"location":"Zappy/server/mlist/","title":"libmlist","text":"<p>Double linked list library</p>"},{"location":"Zappy/server/mlist/#functions","title":"Functions","text":"Name Description m_list_add_at_pos Set a new node to a specific position in a bigger list m_list_apply Apply a function to all members of a list m_list_destroy Clear out a mlist m_list_find Find an element in the list m_list_get Get the value at a given position (it's operator[] )) m_list_new Build new mlist node containing the provided data m_list_pop Remove the passed argument of the list he was in, m_list_size Get the size of the list m_list_smart_find Find an element in the list, using a comparaison function"},{"location":"Zappy/server/mlist/#function-details","title":"Function Details","text":""},{"location":"Zappy/server/mlist/#m_list_add_at_pos","title":"m_list_add_at_pos","text":"<p>void m_list_add_at_pos(mlist_t *ref, mlist_t obj, mlist_pos_t pos)</p> <p>Set a new node to a specific position in a bigger list</p> Parameter <code>ref</code> Address of the ref list Parameter <code>obj</code> New node to add (see m_list_new) Parameter <code>pos</code> M_LIST_FIRST, M_LIST_BEFORE, M_LIST_AFTER, M_LIST_LAST <p>Note</p> <p>The 3rd argument is using the ref argument as mark : <code>M_LIST_BEFORE</code> means just before the reference</p>"},{"location":"Zappy/server/mlist/#m_list_apply","title":"m_list_apply","text":"<p>void m_list_apply(mlist_t *ref, void (*func)(void *))</p> <p>Apply a function to all members of a list</p> Parameter <code>ref</code> A reference to the list (does not need to be the beggining) Parameter <code>func</code> Function to be called on each elemnt of the list."},{"location":"Zappy/server/mlist/#m_list_destroy","title":"m_list_destroy","text":"<p>void m_list_destroy(mlist_t *ref, void (*destructor)(void *))</p> <p>Clear out a mlist</p> Parameter <code>ref</code> A reference to the list to be cleared (does not need to be the beggining) Parameter <code>destructor</code> If not NULL, it will be called on each element."},{"location":"Zappy/server/mlist/#m_list_find","title":"m_list_find","text":"<p>mlist_t m_list_find(mlist_t *ref, void *data)</p> <p>Find an element in the list</p> Parameter <code>ref</code> The list to be searched Parameter <code>data</code> Data to be found on the list Return The node containing the data, or NULL if not found"},{"location":"Zappy/server/mlist/#m_list_get","title":"m_list_get","text":"<p>void *m_list_get(mlist_t *ref, size_t pos)</p> <p>Get the value at a given position (it's operator[] ))</p> Parameter <code>ref</code> The list to be used Parameter <code>pos</code> The index to get the value Return The value found at given position, or NULL if there where an error"},{"location":"Zappy/server/mlist/#m_list_new","title":"m_list_new","text":"<p>mlist_t m_list_new(void *data)</p> <p>Build new mlist node containing the provided data</p> Parameter <code>data</code> Pointer to object to save (char array, struct...) Return Newly built mlist node <p></p> <p>Tip</p> <p>Remember ! You can stack function together ! So, saying <code>m_list_add_at_pos(ref, m_list_new(ptr), MLIST_POS_LAST)</code> is 100% valid ! Until we meet again !</p>"},{"location":"Zappy/server/mlist/#m_list_pop","title":"m_list_pop","text":"<p>void *m_list_pop(mlist_t obj)</p> <p>Remove the passed argument of the list he was in,</p> Parameter <code>obj</code> The node to be deleted Return The data that were in the object <p>Warning</p> <p>It does NOT work like the python pop list method. You need to give an element of the list, not an index.</p>"},{"location":"Zappy/server/mlist/#m_list_size","title":"m_list_size","text":"<p>size_t m_list_size(mlist_t *ref)</p> <p>Get the size of the list</p> Parameter <code>ref</code> The list to be measured. Return Well, kinda self explanatory, isn't it ?"},{"location":"Zappy/server/mlist/#m_list_smart_find","title":"m_list_smart_find","text":"<p>mlist_t m_list_smart_find(mlist_t *ref, void *data, bool (*cmp_func)(void *, void *))</p> <p>Find an element in the list, using a comparaison function</p> Parameter <code>ref</code> The list to be searched Parameter <code>data</code> Data to be found on the list Parameter <code>cmp_func</code> Comparaison function (need to take void pointers) Return The node containing the data, or NULL if not found"}]}