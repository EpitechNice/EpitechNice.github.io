{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Zappy","text":"<p>a tribute to Zaphod Beeblebrox</p> Server (C) Server, used for game logic"},{"location":"#functions","title":"Functions","text":"Name Description is_digit Check is a char is a digit is_digits Check is a string is made of digit read_file Read a file get_file_content Get the content of a file parsing_check Final check for the parsing destroy_parsing Destroy the parsing structure. init_parsing Init an empty parsing structure parse Parse the arguments and return a parsing structure."},{"location":"#function-details","title":"Function Details","text":""},{"location":"#destroy_parsing","title":"destroy_parsing","text":"<p>void destroy_parsing(parsing_t *parsing)</p> <p>Destroy the parsing structure.</p> Parameter <code>parsing</code> A pointer to the parsing structure."},{"location":"#get_file_content","title":"get_file_content","text":"<p>char *get_file_content(char *filepath)</p> <p>Get the content of a file</p> Parameter <code>filepath</code> the path to the file Return the content of the file as a string"},{"location":"#init_parsing","title":"init_parsing","text":"<p>parsing_t *init_parsing(void)</p> <p>Init an empty parsing structure</p> Return the new structure"},{"location":"#is_digit","title":"is_digit","text":"<p>bool is_digit(char c)</p> <p>Check is a char is a digit</p> Parameter <code>c</code> the character to check Return True if the character is a digit, false otherwise"},{"location":"#is_digits","title":"is_digits","text":"<p>bool is_digits(char *str)</p> <p>Check is a string is made of digit</p> Parameter <code>str</code> the string to check Return True if the string is made of digits, false otherwise"},{"location":"#parse","title":"parse","text":"<p>parsing_t *parse(int argc, char **argv)</p> <p>Parse the arguments and return a parsing structure.</p> Parameter <code>argc</code> The number of arguments. Parameter <code>argv</code> The arguments. Return A pointer to the parsing structure."},{"location":"#parsing_check","title":"parsing_check","text":"<p>parsing_t *parsing_check(parsing_t *p)</p> <p>Final check for the parsing</p> Parameter <code>p</code> the parsing structure"},{"location":"#read_file","title":"read_file","text":"<p>void read_file(char *filepath)</p> <p>Read a file</p> Parameter <code>filepath</code> the path to the file"},{"location":"server/","title":"Server (C)","text":"<p>Server, used for game logic</p>"},{"location":"server/#functions","title":"Functions","text":"Name Description cmp Erases an element from the linked list. cmp Extracts an element from the linked list. cmp Finds the data of an element in the linked list. cmp Finds an element in the linked list. cmp Inserts a new element in the linked list. dl_empty Checks if the linked list is empty. dl_length Returns the length of the linked list. dl_pop_back Removes the last element of the linked list and returns its data. dl_pop_front Removes the first element of the linked list and returns its data. dl_push_back Adds a new element at the end of the linked list. dl_push_front Adds a new element at the beginning of the linked list. free_func Clears the linked list and send the data of each element to the * given function. func Iterates through the linked list and applies the given function to * the data of each element. Do nothing if the list is empty or if the given * function is NULL. func Iterates through the linked list and applies the given function to * the node. Do nothing if the list is empty or if the given function is NULL."},{"location":"server/#function-details","title":"Function Details","text":""},{"location":"server/#cmp","title":"cmp","text":"<p>bool cmp(void *, void *)</p> <p>Erases an element from the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>ref</code> A comparative value to find the element to erase. Parameter <code>cmp</code> A function that takes two void pointers as arguments and returns a boolean. The first argument is the given ref and the second is the data of the current element. Parameter <code>del</code> A function that takes a void pointer as an argument and returns void. Or NULL if no function is needed. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> <p>bool cmp(void *, void *)</p> <p>Extracts an element from the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>ref</code> A comparative value to find the element to extract. Parameter <code>cmp</code> A function that takes two void pointers as arguments and returns a boolean. The first argument is the given ref and the second is the data of the current element. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> Return Return the data of the extracted element. NULL if the element was not found or in case of error <p>bool cmp(void *, void *)</p> <p>Finds the data of an element in the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>ref</code> A comparative value to find the element. Parameter <code>cmp</code> A function that takes two void pointers as arguments and returns a boolean. The first argument is the given ref and the second is the data of the current element. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> Return Return the data of the found element. NULL if the element was not found or in case of error. <p>bool cmp(void *, void *)</p> <p>Finds an element in the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>ref</code> A comparative value to find the element. Parameter <code>cmp</code> A function that takes two void pointers as arguments and returns a boolean. The first argument is the given ref and the second is the data of the current element. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> Return Return founded element. NULL if the element was not found or in case of error. <p>bool cmp(void *, void *)</p> <p>Inserts a new element in the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>data</code> The data to be added to the list. Parameter <code>cmp</code> A function that takes two void pointers as arguments and returns a boolean. The first argument is the given data and the second is the data of the current element. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p>"},{"location":"server/#dl_empty","title":"dl_empty","text":"<p>bool dl_empty(lnode_t *head)</p> <p>Checks if the linked list is empty.</p> Parameter <code>head</code> A pointer to the head of the linked list. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> Return Return true if the list is empty, false otherwise."},{"location":"server/#dl_length","title":"dl_length","text":"<p>int dl_length(lnode_t *head)</p> <p>Returns the length of the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> Return Return the length of the list. 0 if the list is empty or in case of error."},{"location":"server/#dl_pop_back","title":"dl_pop_back","text":"<p>void *dl_pop_back(lnode_t **head)</p> <p>Removes the last element of the linked list and returns its data.</p> Parameter <code>head</code> A pointer to the head of the linked list. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> Return Return the data of the first element of the list. NULL if the list is empty or in case of error."},{"location":"server/#dl_pop_front","title":"dl_pop_front","text":"<p>void *dl_pop_front(lnode_t **head)</p> <p>Removes the first element of the linked list and returns its data.</p> Parameter <code>head</code> A pointer to the head of the linked list. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> Return Return the data of the first element of the list. NULL if the list is empty or in case of error."},{"location":"server/#dl_push_back","title":"dl_push_back","text":"<p>void dl_push_back(lnode_t **head, void *data)</p> <p>Adds a new element at the end of the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>value</code> The value to be added to the list. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p>"},{"location":"server/#dl_push_front","title":"dl_push_front","text":"<p>void dl_push_front(lnode_t **head, void *data)</p> <p>Adds a new element at the beginning of the linked list.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>value</code> The value to be added to the list. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p>"},{"location":"server/#free_func","title":"free_func","text":"<p>void free_func(void *)</p> <p>Clears the linked list and send the data of each element to the  * given function.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>free_func</code> A function that takes a void pointer as an argument and returns void. Or NULL if no function is needed. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p>"},{"location":"server/#func","title":"func","text":"<p>void func(void *)</p> <p>Iterates through the linked list and applies the given function to  * the data of each element. Do nothing if the list is empty or if the given  * function is NULL.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>func</code> A function that takes a void pointer as an argument and returns void. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p> <p>void func(lnode_t *)</p> <p>Iterates through the linked list and applies the given function to  * the node. Do nothing if the list is empty or if the given function is NULL.</p> Parameter <code>head</code> A pointer to the head of the linked list. Parameter <code>func</code> A function that takes a lnode_t pointer as an argument and returns void. <p>Warning</p> <p>The function assumes that the given list is valid with a NULL at the end. If this is not the case, the behavior is undefined.</p>"}]}